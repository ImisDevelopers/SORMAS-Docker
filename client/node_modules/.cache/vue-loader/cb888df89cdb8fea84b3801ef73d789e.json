{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/PublicStatisticsComponent.vue?vue&type=style&index=0&id=15b0ad71&scoped=true&lang=css&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/PublicStatisticsComponent.vue","mtime":1584869289718},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/css-loader/dist/cjs.js","mtime":1584795993125},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1584795993380},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/postcss-loader/src/index.js","mtime":1584795993354},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaDMgewogICAgbWFyZ2luOiAyMHB4IDEwcHg7Cn0Kc3BhbiB7CiAgICBtYXJnaW46IDEwcHg7Cn0KLnRhYmxlLWNvbnRhaW5lciB7CiAgICB3aWR0aDogMTAwJTsKICAgIG92ZXJmbG93LXg6IHNjcm9sbDsKICAgIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoOwp9Cg=="},{"version":3,"sources":["PublicStatisticsComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PublicStatisticsComponent.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <button>Export CSV</button><!-- dummy -->\n        <div class=\"table-container\">\n            <a-table :columns=\"columns\" :dataSource=\"data\" >\n            </a-table>\n        </div>\n\n    </div>\n</template>\n\n<script>\n    const columns = [\n        {\n            title: 'PLZ',\n            dataIndex: 'zip',\n            key: 'zip',\n            width: 10,\n            sorter: (a, b) => a.zip - b.zip,\n        },\n        {\n            title: 'Aktive F채lle (Infizierte)',\n            dataIndex: 'active',\n            key: 'active',\n            width: 10,\n            sorter: (a, b) => a.active - b.active,\n        },\n        {\n            title: 'Verdachtsf채lle',\n            dataIndex: 'suspicion',\n            key: 'suspicion',\n            width: 10,\n            sorter: (a, b) => a.suspicion - b.suspicion,\n        },\n        {\n            title: 'Genesene F채lle',\n            dataIndex: 'recovered',\n            key: 'recovered',\n            width: 10,\n            sorter: (a, b) => a.recovered - b.recovered,\n        },\n        {\n            title: 'Verstorbene F채lle',\n            dataIndex: 'deaths',\n            key: 'deaths',\n            width: 10,\n            sorter: (a, b) => a.deaths - b.deaths,\n        },\n    ];\n    const data = [\n        {\n            zip: \"12345\",\n            active: \"320\",\n            suspicion: \"742\",\n            recovered: \"135\",\n            deaths: \"12\",\n        },\n        {\n            zip: \"12346\",\n            active: \"920\",\n            suspicion: \"342\",\n            recovered: \"1435\",\n            deaths: \"12\",\n        }\n    ];\n    export default {\n        name: 'TestingComponent',\n        props: {\n            msg: String\n        },\n        data() {\n            return {\n                entities: [],\n                content: \"\",\n                columns,\n                data\n            }\n        },\n        methods: {\n            create(e) {\n                e.preventDefault();\n                if (this.content.length > 0) {\n                    fetch('/exampleEntities',\n                        {\n                            method: 'POST',\n                            body: JSON.stringify({ content: this.content }),\n                            headers: {\n                                'Content-Type': 'application/json'\n                            }\n                        })\n                        .then((response) => {\n                            return response.json();\n                        })\n                        .then((entity) => {\n                            this.entities.push(entity);\n                        });\n                    this.content = \"\";\n                }\n            }\n        },\n        created() {\n            fetch('/exampleEntities')\n                .then((response) => {\n                    return response.json();\n                })\n                .then((entities) => {\n                    this.entities.push(...entities);\n                });\n        }\n    }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    h3 {\n        margin: 20px 10px;\n    }\n    span {\n        margin: 10px;\n    }\n    .table-container {\n        width: 100%;\n        overflow-x: scroll;\n        scroll-behavior: smooth;\n    }\n</style>"]}]}