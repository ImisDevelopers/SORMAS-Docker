{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/RegisterTest.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/RegisterTest.vue","mtime":1589906836724},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgppbXBvcnQgeyBDcmVhdGVMYWJUZXN0RFRPIH0gZnJvbSAnQC9hcGkvU3dhZ2dlckFwaScKaW1wb3J0IFZ1ZSBmcm9tICd2dWUnCmltcG9ydCBEYXRlSW5wdXQgZnJvbSAnLi4vY29tcG9uZW50cy9EYXRlSW5wdXQudnVlJwppbXBvcnQgQXBpIGZyb20gJ0AvYXBpJwppbXBvcnQgUGF0aWVudElucHV0IGZyb20gJy4uL2NvbXBvbmVudHMvUGF0aWVudElucHV0LnZ1ZScKaW1wb3J0IExhYm9yYXRvcnlJbnB1dCBmcm9tICcuLi9jb21wb25lbnRzL0xhYm9yYXRvcnlJbnB1dC52dWUnCmltcG9ydCB7IFRlc3RUeXBlSXRlbSwgdGVzdFR5cGVzIH0gZnJvbSAnQC9tb2RlbHMvdGVzdC10eXBlcycKaW1wb3J0IHsgdGVzdFJlc3VsdHMgfSBmcm9tICdAL21vZGVscy9ldmVudC10eXBlcycKaW1wb3J0IHsgVGVzdE1hdGVyaWFsSXRlbSwgdGVzdE1hdGVyaWFscyB9IGZyb20gJ0AvbW9kZWxzL3Rlc3QtbWF0ZXJpYWxzJwppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCcKCmludGVyZmFjZSBTdGF0ZSB7CiAgZm9ybTogYW55CiAgdGVzdFR5cGVzOiBUZXN0VHlwZUl0ZW1bXQogIHRlc3RNYXRlcmlhbHM6IFRlc3RNYXRlcmlhbEl0ZW1bXQogIHRvZGF5OiBtb21lbnQuTW9tZW50Cn0KCmV4cG9ydCBkZWZhdWx0IFZ1ZS5leHRlbmQoewogIG5hbWU6ICdSZWdpc3RlclRlc3QnLAogIGNvbXBvbmVudHM6IHsKICAgIFBhdGllbnRJbnB1dCwKICAgIExhYm9yYXRvcnlJbnB1dCwKICAgIERhdGVJbnB1dCwKICB9LAogIGRhdGEoKTogU3RhdGUgewogICAgcmV0dXJuIHsKICAgICAgZm9ybTogdGhpcy4kZm9ybS5jcmVhdGVGb3JtKHRoaXMpLAogICAgICB0ZXN0VHlwZXM6IHRlc3RUeXBlcywKICAgICAgdGVzdE1hdGVyaWFsczogdGVzdE1hdGVyaWFscywKICAgICAgdG9kYXk6IG1vbWVudCgpLAogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgaGFuZGxlU3VibWl0KCkgewogICAgICB0aGlzLmZvcm0udmFsaWRhdGVGaWVsZHMoKGVycjogRXJyb3IsIHZhbHVlczogQ3JlYXRlTGFiVGVzdERUTykgPT4gewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICBjb25zdCByZXF1ZXN0ID0gewogICAgICAgICAgLi4udmFsdWVzLAogICAgICAgIH0KCiAgICAgICAgQXBpLmNyZWF0ZVRlc3RGb3JQYXRpZW50VXNpbmdQb3N0KHJlcXVlc3QpCiAgICAgICAgICAudGhlbigobGFiVGVzdCkgPT4gewogICAgICAgICAgICBjb25zdCBjcmVhdGVkTGFiVGVzdCA9IGxhYlRlc3QKICAgICAgICAgICAgY29uc3QgY3JlYXRlZExhYlRlc3RTdGF0dXMgPQogICAgICAgICAgICAgIHRlc3RSZXN1bHRzLmZpbmQoCiAgICAgICAgICAgICAgICAodGVzdFJlc3VsdCkgPT4gdGVzdFJlc3VsdC5pZCA9PT0gbGFiVGVzdC50ZXN0U3RhdHVzCiAgICAgICAgICAgICAgKT8ubGFiZWwgfHwgJycKICAgICAgICAgICAgdGhpcy5mb3JtLnJlc2V0RmllbGRzKCkKICAgICAgICAgICAgY29uc3QgaCA9IHRoaXMuJGNyZWF0ZUVsZW1lbnQKICAgICAgICAgICAgdGhpcy4kc3VjY2Vzcyh7CiAgICAgICAgICAgICAgdGl0bGU6ICdEZXIgVGVzdCB3dXJkZSBlcmZvbGdyZWljaCBhbmdlbGVndC4nLAogICAgICAgICAgICAgIGNvbnRlbnQ6IGgoJ2RpdicsIHt9LCBbCiAgICAgICAgICAgICAgICBoKCdkaXYnLCBgVGVzdCBJRDogJHtjcmVhdGVkTGFiVGVzdC50ZXN0SWR9YCksCiAgICAgICAgICAgICAgICBoKCdkaXYnLCBgVGVzdCBTdGF0dXM6ICR7Y3JlYXRlZExhYlRlc3RTdGF0dXN9YCksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gewogICAgICAgICAgICAgIG1lc3NhZ2U6ICdGZWhsZXIgYmVpbSBBbmxlZ2VuIGRlcyBUZXN0cy4nLAogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBlcnIubWVzc2FnZSwKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLiRub3RpZmljYXRpb24uZXJyb3Iobm90aWZpY2F0aW9uKQogICAgICAgICAgfSkKICAgICAgfSkKICAgIH0sCiAgfSwKfSkK"},{"version":3,"sources":["RegisterTest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RegisterTest.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <a-card style=\"max-width: 500px; margin: 2rem auto; min-height: 300px;\">\n    <a-form\n      :colon=\"false\"\n      :form=\"form\"\n      :label-col=\"{ span: 6 }\"\n      :wrapper-col=\"{ span: 18 }\"\n      @submit.prevent=\"handleSubmit\"\n    >\n      <LaboratoryInput\n        :form=\"form\"\n        :validation=\"[\n          'laboratoryId',\n          {\n            rules: [\n              {\n                required: true,\n                message: 'Bitte wählen Sie ein Labor aus.',\n              },\n            ],\n          },\n        ]\"\n        label=\"Labor\"\n      />\n\n      <a-form-item label=\"Patienten-ID\">\n        <PatientInput\n          v-decorator=\"[\n            'patientId',\n            {\n              rules: [\n                {\n                  required: true,\n                  message: 'Bitte geben Sie die Patienten-ID ein.',\n                },\n              ],\n            },\n          ]\"\n        />\n      </a-form-item>\n\n      <!-- Test ID -->\n      <a-form-item label=\"Test-ID\">\n        <a-input\n          placeholder=\"Neue Test ID\"\n          v-decorator=\"[\n            'testId',\n            {\n              rules: [\n                {\n                  required: true,\n                  message: 'Bitte geben Sie die Test-ID ein.',\n                },\n              ],\n            },\n          ]\"\n        />\n      </a-form-item>\n\n      <!-- TestType -->\n      <a-form-item label=\"Testtyp\">\n        <a-radio-group\n          class=\"imis-radio-group\"\n          v-decorator=\"[\n            'testType',\n            {\n              rules: [\n                {\n                  required: true,\n                  message: 'Bitte geben Sie den Typen des Tests an.',\n                },\n              ],\n            },\n          ]\"\n        >\n          <a-radio\n            :key=\"testTypeItem.id\"\n            :value=\"testTypeItem.id\"\n            v-for=\"testTypeItem in testTypes\"\n          >\n            {{ testTypeItem.label }}\n          </a-radio>\n        </a-radio-group>\n      </a-form-item>\n\n      <!-- TestType -->\n      <a-form-item label=\"Proben-Material\">\n        <a-radio-group\n          class=\"imis-radio-group\"\n          v-decorator=\"[\n            'testMaterial',\n            {\n              rules: [\n                {\n                  required: true,\n                  message: 'Bitte geben Sie das Material des Tests an.',\n                },\n              ],\n            },\n          ]\"\n        >\n          <a-radio\n            :key=\"testMaterialItem.id\"\n            :value=\"testMaterialItem.id\"\n            v-for=\"testMaterialItem in testMaterials\"\n          >\n            {{ testMaterialItem.label }}\n          </a-radio>\n        </a-radio-group>\n      </a-form-item>\n\n      <a-form-item label=\"Abnahmedatum\">\n        <DateInput\n          :defaultValue=\"today\"\n          v-decorator=\"[\n            'eventDate',\n            {\n              rules: [\n                {\n                  required: false,\n                  message: 'Datum der Probenabnahme',\n                },\n              ],\n            },\n          ]\"\n        />\n      </a-form-item>\n\n      <!-- Kommentar -->\n      <a-form-item label=\"Kommentar\">\n        <a-textarea\n          :autoSize=\"{ minRows: 3, maxRows: 5 }\"\n          placeholder=\"Kommentar hinzufügen\"\n          v-decorator=\"['comment']\"\n        />\n      </a-form-item>\n\n      <!-- Submit -->\n      <a-divider />\n      <a-form-item :wrapper-col=\"{ span: 24, offset: 0 }\">\n        <a-button html-type=\"submit\" type=\"primary\">\n          Speichern\n        </a-button>\n      </a-form-item>\n    </a-form>\n  </a-card>\n</template>\n\n<script lang=\"ts\">\nimport { CreateLabTestDTO } from '@/api/SwaggerApi'\nimport Vue from 'vue'\nimport DateInput from '../components/DateInput.vue'\nimport Api from '@/api'\nimport PatientInput from '../components/PatientInput.vue'\nimport LaboratoryInput from '../components/LaboratoryInput.vue'\nimport { TestTypeItem, testTypes } from '@/models/test-types'\nimport { testResults } from '@/models/event-types'\nimport { TestMaterialItem, testMaterials } from '@/models/test-materials'\nimport moment from 'moment'\n\ninterface State {\n  form: any\n  testTypes: TestTypeItem[]\n  testMaterials: TestMaterialItem[]\n  today: moment.Moment\n}\n\nexport default Vue.extend({\n  name: 'RegisterTest',\n  components: {\n    PatientInput,\n    LaboratoryInput,\n    DateInput,\n  },\n  data(): State {\n    return {\n      form: this.$form.createForm(this),\n      testTypes: testTypes,\n      testMaterials: testMaterials,\n      today: moment(),\n    }\n  },\n  methods: {\n    handleSubmit() {\n      this.form.validateFields((err: Error, values: CreateLabTestDTO) => {\n        if (err) {\n          return\n        }\n        const request = {\n          ...values,\n        }\n\n        Api.createTestForPatientUsingPost(request)\n          .then((labTest) => {\n            const createdLabTest = labTest\n            const createdLabTestStatus =\n              testResults.find(\n                (testResult) => testResult.id === labTest.testStatus\n              )?.label || ''\n            this.form.resetFields()\n            const h = this.$createElement\n            this.$success({\n              title: 'Der Test wurde erfolgreich angelegt.',\n              content: h('div', {}, [\n                h('div', `Test ID: ${createdLabTest.testId}`),\n                h('div', `Test Status: ${createdLabTestStatus}`),\n              ]),\n            })\n          })\n          .catch((err) => {\n            const notification = {\n              message: 'Fehler beim Anlegen des Tests.',\n              description: err.message,\n            }\n            this.$notification.error(notification)\n          })\n      })\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\"></style>\n"]}]}