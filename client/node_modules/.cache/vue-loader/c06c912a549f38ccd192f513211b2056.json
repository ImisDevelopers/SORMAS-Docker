{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/PatientList.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/PatientList.vue","mtime":1586713315430},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/css-loader/dist/cjs.js","mtime":1584795993125},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1584795993380},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/postcss-loader/src/index.js","mtime":1584795993354},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/sass-loader/dist/cjs.js","mtime":1586724165268},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmltaXMtdGFibGUtbm8tcGFnaW5hdGlvbiB7CiAgLmFudC10YWJsZS1wYWdpbmF0aW9uIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgfQp9Cg=="},{"version":3,"sources":["PatientList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqZA;AACA;AACA;AACA;AACA","file":"PatientList.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <a-card class=\"table-container\">\n      <!-- TODO refactor search in own component -->\n      <a-form class=\"search-container\" :model=\"form\">\n        <a-form-item style=\"width: 600px; max-width: 100%\">\n          <a-input v-model=\"form.query\"\n                   placeholder=\"Suche über ID, Name, Stadt, Email oder Telefon (z.B. 'Max Mustermann Berlin')\"\n                   :disabled=\"showAdvancedSearch\">\n            <a-icon slot=\"prefix\" type=\"search\" />\n          </a-input>\n        </a-form-item>\n        <a-button @click=\"toggleAdvancedSearch\">\n          <a-icon :type=\"showAdvancedSearch ? 'down' : 'right'\" />\n          Erweiterte Suche\n        </a-button>\n        <a-button icon=\"search\" type=\"primary\" html-type=\"submit\"\n                  @click=\"handleSearch\">\n          Suche\n        </a-button>\n      </a-form>\n      <a-form class=\"search-container\" :model=\"advancedForm\" v-if=\"showAdvancedSearch\">\n        <a-form-item label=\"Vorname\">\n          <a-input v-model=\"advancedForm.firstName\" placeholder=\"Vorname\">\n            <a-icon slot=\"prefix\" type=\"user\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Nachname\">\n          <a-input v-model=\"advancedForm.lastName\" placeholder=\"Nachname\">\n            <a-icon slot=\"prefix\" type=\"user\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Status\">\n          <a-select style=\"width: 250px\" placeholder=\"Status\" v-model=\"advancedForm.patientStatus\">\n            <a-select-option value=\"\">Alle</a-select-option>\n            <a-select-option v-for=\"eventType in eventTypes\" :key=\"eventType.id\">\n              <a-icon :type=\"eventType.icon\" style=\"margin-right: 5px\" />\n              {{eventType.label}}\n            </a-select-option>\n          </a-select>\n        </a-form-item>\n        <a-form-item label=\"ID\">\n          <a-input v-model=\"advancedForm.id\" placeholder=\"ID\">\n            <a-icon slot=\"prefix\" type=\"hdd\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Geschlecht\">\n          <a-select v-model=\"advancedForm.gender\" style=\"width: 120px\" placeholder=\"Geschlecht\">\n            <a-select-option value=\"\">Alle</a-select-option>\n            <a-select-option value=\"weiblich\">\n              <a-icon type=\"woman\" style=\"margin-right: 5px\" />\n              Weiblich\n            </a-select-option>\n            <a-select-option value=\"männlich\">\n              <a-icon type=\"man\" style=\"margin-right: 5px\" />\n              Männlich\n            </a-select-option>\n            <a-select-option value=\"sonstiges\">Sonstiges</a-select-option>\n          </a-select>\n        </a-form-item>\n        <a-form-item label=\"Stadt\">\n          <a-input v-model=\"advancedForm.city\" placeholder=\"Stadt\">\n            <a-icon slot=\"prefix\" type=\"home\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"E-Mail\">\n          <a-input v-model=\"advancedForm.email\" placeholder=\"E-Mail\">\n            <a-icon slot=\"prefix\" type=\"mail\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Telefonnummer\">\n          <a-input v-model=\"advancedForm.phoneNumber\" placeholder=\"Telefonnummer\">\n            <a-icon slot=\"prefix\" type=\"phone\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Straße\">\n          <a-input v-model=\"advancedForm.street\" placeholder=\"Straße\">\n            <a-icon slot=\"prefix\" type=\"home\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Hausnummer\" style=\"width: 100px\">\n          <a-input v-model=\"advancedForm.houseNumber\" placeholder=\"Hausnr.\">\n            <a-icon slot=\"prefix\" type=\"home\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Postleitzahl\" style=\"width: 100px\">\n          <a-input v-model=\"advancedForm.zip\" placeholder=\"PLZ\">\n            <a-icon slot=\"prefix\" type=\"home\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Versicherung\">\n          <a-input v-model=\"advancedForm.insuranceCompany\" placeholder=\"Versicherung\">\n            <a-icon slot=\"prefix\" type=\"hdd\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Versicherungsnummer\">\n          <a-input v-model=\"advancedForm.insuranceMembershipNumber\" placeholder=\"Versicherungsnummer\">\n            <a-icon slot=\"prefix\" type=\"idcard\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Arzt-ID\">\n          <a-input v-model=\"advancedForm.doctorId\" placeholder=\"Arzt-ID\">\n            <a-icon slot=\"prefix\" type=\"hdd\" />\n          </a-input>\n        </a-form-item>\n        <a-form-item label=\"Labor-ID\">\n          <a-input v-model=\"advancedForm.laboratoryId\" placeholder=\"Labor-ID\">\n            <a-icon slot=\"prefix\" type=\"hdd\" />\n          </a-input>\n        </a-form-item>\n        <!-- Invisible Button so user can use enter to search -->\n        <a-button style=\"visibility: hidden\" html-type=\"submit\"\n                  @click=\"handleSearch\" />\n      </a-form>\n      <a-table\n        class=\"imis-table-no-pagination\"\n        :columns=\"columnsSchema\"\n        :dataSource=\"actualPatients\"\n        :scroll=\"{x: 0, y: 0}\"\n        :pagination=\"{ pageSize: 500 }\"\n        rowKey=\"id\"\n        :customRow=\"customRow\"\n        @change=\"handleTableChange\"\n      >\n        <div slot=\"patientStatus\" slot-scope=\"patientStatus\">\n          <a-icon :type=\"eventTypes.find(type => type.id === patientStatus).icon\" style=\"margin-right: 5px\" />\n          {{eventTypes.find(type => type.id === patientStatus).label}}\n        </div>\n        <div slot=\"operation\" slot-scope=\"nothing, patient\" style=\"cursor: pointer\">\n          <a-icon type=\"search\" style=\"margin-right: 5px; cursor: pointer\" @click=\"() => handlePatientClick(patient)\" />\n        </div>\n      </a-table>\n      <div style=\"display: flex; width: 100%; margin: 15px 0; justify-content: flex-end; align-items: center\">\n        <a-button type=\"primary\" style=\"margin-right: 50px\" @click=\"downloadPatients\">CSV exportieren</a-button>\n        <span style=\"margin-right: 10px\">{{count}} Patienten</span>\n        <a-pagination\n          showSizeChanger\n          :pageSize.sync=\"form.pageSize\"\n          @showSizeChange=\"onShowSizeChange\"\n          :total=\"count\"\n          v-model=\"currentPage\"\n        />\n      </div>\n    </a-card>\n  </div>\n</template>\n\n<!--// TestStationen Ordnen ProbeIds und durchzuführrende Tests den Patienten zu-->\n\n<script lang=\"ts\">\nimport { Column } from 'ant-design-vue/types/table/column'\nimport Vue from 'vue'\nimport { Patient, PatientSearchParamsDTO } from '@/api/SwaggerApi'\nimport { eventTypes } from '@/models/event-types'\nimport { downloadCsv } from '@/util/export-service'\nimport Api from '@/api'\nimport moment from 'moment'\n\nconst columnsSchema: Partial<Column>[] = [\n  {\n    title: '',\n    dataIndex: 'operation',\n    scopedSlots: {\n      customRender: ['operation'],\n    },\n  },\n  {\n    title: 'Nachname',\n    // sorter: (a, b) => a.lastName.localeCompare(b.lastName),\n    dataIndex: 'lastName',\n    key: 'lastName',\n  },\n  {\n    title: 'Vorname',\n    // sorter: (a, b) => a.firstName.localeCompare(b.firstName),\n    dataIndex: 'firstName',\n    key: 'firstName',\n  },\n  {\n    title: 'Geschlecht',\n    dataIndex: 'gender',\n    key: 'gender',\n  },\n  {\n    title: 'Status',\n    dataIndex: 'patientStatus',\n    key: 'patientStatus',\n    scopedSlots: {\n      customRender: 'patientStatus',\n    },\n    sorter: true,\n  },\n  {\n    title: 'Stadt',\n    dataIndex: 'city',\n    key: 'city',\n  },\n  {\n    title: 'E-Mail',\n    dataIndex: 'email',\n    key: 'email',\n  },\n  {\n    title: 'ID',\n    dataIndex: 'id',\n    key: 'id',\n    defaultSortOrder: 'ascend',\n  },\n]\n\ninterface SimpleForm {\n  query: string;\n  order: string;\n  orderBy: string;\n  offsetPage: number;\n  pageSize: number;\n}\n\ninterface State {\n  form: SimpleForm;\n  advancedForm: Partial<PatientSearchParamsDTO>;\n\n  [key: string]: any;\n}\n\nexport default Vue.extend({\n  name: 'PatientList',\n  data(): State {\n    return {\n      form: {\n        query: '',\n        order: 'asc',\n        orderBy: 'lastName',\n        offsetPage: 0,\n        pageSize: 10,\n      },\n      advancedForm: {\n        gender: '',\n        city: '',\n        email: '',\n        phoneNumber: '',\n        street: '',\n        houseNumber: '',\n        zip: '',\n        insuranceCompany: '',\n        insuranceMembershipNumber: '',\n        doctorId: '',\n        laboratoryId: '',\n        firstName: '',\n        lastName: '',\n        patientStatus: undefined,\n        id: '',\n      },\n      content: '',\n      count: 0,\n      currentPage: 1, // Starts at 1\n      columnsSchema,\n      data: [], // data\n      showAdvancedSearch: false,\n      eventTypes: eventTypes,\n      actualPatients: [],\n    }\n  },\n  watch: {\n    currentPage() {\n      this.loadPage()\n    },\n    '$route.query.query'() {\n      this.loadAfterUrlChange()\n    },\n  },\n  created() {\n    this.loadAfterUrlChange()\n  },\n  methods: {\n    loadAfterUrlChange() {\n      const query = this.$route.query.query\n      if (query) {\n        this.form.query = query.toString()\n      }\n      this.loadPage()\n    },\n    handleSearch() {\n      this.currentPage = 1\n      this.loadPage()\n    },\n    onShowSizeChange(current: number, pageSize: number) {\n      this.currentPage = current\n      this.advancedForm.pageSize = pageSize\n      this.loadPage()\n    },\n    loadPage() {\n      this.form.offsetPage = this.currentPage - 1\n      let countPromise\n      let queryPromise\n      if (this.showAdvancedSearch) {\n        const formValues = { ...this.form, ...this.advancedForm }\n\n        if (formValues.patientStatus) {\n          // Backend fails on empty string\n          formValues.patientStatus = undefined\n        }\n\n        countPromise = Api.api.countQueryPatientsUsingPost(formValues)\n        queryPromise = Api.api.queryPatientsUsingPost(formValues)\n      } else {\n        const query = this.form.query\n        countPromise = Api.api.countQueryPatientsSimpleUsingGet({ query })\n        queryPromise = Api.api.queryPatientsSimpleUsingPost({ ...this.form })\n      }\n\n      countPromise.then(count => {\n        this.count = count\n      })\n      queryPromise.then((result: Patient[]) => {\n        this.actualPatients = result\n      }).catch(error => {\n        console.error(error)\n        const notification = {\n          message: 'Fehler beim Laden der Patientendaten.',\n          description: error.message,\n        }\n        this.$notification.error(notification)\n      })\n    },\n    toggleAdvancedSearch() {\n      this.showAdvancedSearch = !this.showAdvancedSearch\n    },\n    downloadPatients() {\n      this.form.offsetPage = this.currentPage - 1\n      let countPromise\n      let formValues: any\n      if (this.showAdvancedSearch) {\n        formValues = { ...this.form, ...this.advancedForm }\n        if (formValues.patientStatus) {\n          // Backend fails on empty string\n          formValues.patientStatus = undefined\n        }\n        countPromise = Api.api.countQueryPatientsUsingPost(formValues)\n      } else {\n        formValues = { ...this.form }\n        const query = this.form.query\n        countPromise = Api.api.countQueryPatientsSimpleUsingGet({ query })\n      }\n\n      countPromise.then(count => {\n        // Download all data that applies to the current filter\n        formValues.offsetPage = 0\n        formValues.pageSize = count\n\n        let queryPromise: Promise<Patient[]>\n        if (this.showAdvancedSearch) {\n          queryPromise = Api.api.queryPatientsUsingPost(formValues)\n        } else {\n          queryPromise = Api.api.queryPatientsSimpleUsingPost(formValues)\n        }\n\n        queryPromise.then(result => {\n          const header = 'ID,Vorname,Nachname,Geschlecht,Status,Geburtsdatum,Stadt,E-Mail;Telefonnummer;' +\n            'Straße;Hausnummer;Stadt;Versicherung;Versichertennummer;'\n          const patients = result.map((patient: Patient) =>\n            `${patient.id};${patient.firstName};${patient.lastName};${patient.gender};${patient.patientStatus};` +\n            `${patient.dateOfBirth};${patient.city};${patient.email};${patient.phoneNumber};${patient.street};` +\n            `${patient.houseNumber};${patient.city};${patient.insuranceCompany};${patient.insuranceMembershipNumber}`,\n          ).join('\\n')\n          const filename = moment().format('YYYY_MM_DD') + '_patienten_export.csv'\n          downloadCsv(header + '\\n' + patients, filename)\n        }).catch((error: Error) => {\n          console.error(error)\n          const notification = {\n            message: 'Fehler beim Laden der Patientendaten.',\n            description: error.message,\n          }\n          this.$notification.error(notification)\n        })\n      })\n    },\n    handleTableChange(pagination: any, filters: any, sorter: any) {\n      const sortKey = sorter.field ? sorter.field : 'lastName'\n      let sortOrder = 'asc'\n      if (sorter.order === 'descend') {\n        sortOrder = 'desc'\n      }\n      this.form.order = sortOrder\n      this.form.orderBy = sortKey\n      this.loadPage()\n    },\n    handlePatientClick(patient: Patient) {\n      if (patient.id) {\n        this.$router.push({ name: 'patient-detail', params: { id: patient.id } })\n      }\n    },\n    customRow(record: Patient) {\n      return {\n        on: {\n          dblclick: () => this.handlePatientClick(record),\n        },\n      }\n    },\n  },\n})\n\n</script>\n\n<style lang=\"scss\">\n  .imis-table-no-pagination {\n    .ant-table-pagination {\n      display: none;\n    }\n  }\n</style>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n  h3 {\n    margin: 20px 10px;\n  }\n\n  .table-container {\n    width: 100%;\n  }\n\n  .search-container {\n    display: flex;\n    flex-wrap: wrap;\n    margin-bottom: 15px;\n    align-items: flex-end;\n  }\n\n  .search-container > * {\n    margin: 0 10px;\n    max-width: 250px;\n  }\n\n  .search-container > button {\n    margin-bottom: 5px;\n    margin-top: 5px;\n  }\n</style>\n"]}]}