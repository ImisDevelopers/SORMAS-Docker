{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/api/index.ts","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/api/index.ts","mtime":1586713315430},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js","mtime":1584795992192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL2Npcm90emtpL3Byb2plY3RzL3ZpcnVzLzFfMDExX2FfaW5mZWt0aW9uc2ZhbGxfdWViZXJtaXR0ZWxsdW5nL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCB7IEFwaSB9IGZyb20gJ0AvYXBpL1N3YWdnZXJBcGknOwp2YXIgYmFzZVVybCA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47CgppZiAobG9jYXRpb24uaG9zdC5pbmNsdWRlcygnbG9jYWxob3N0JykgfHwgbG9jYXRpb24uaG9zdC5pbmNsdWRlcygnMTI3LjAuMC4xJykpIHsKICBiYXNlVXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAnOyAvLyBBbHRlcm5hdGl2ZSBjb25maWcgdG8gcnVuIHRoZSBhcHAgbG9jYWxseSB3aXRob3V0IHJvb3Q7IHNlZSBwcm94eSBjb25mCiAgLy8gYmFzZVVybCA9ICdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpJwp9Ci8qKgogKiBUaGUgbnBtIHBhY2thZ2UgdGhhdCBjcmVhdGVzIHRoZSBzd2FnZ2VyIGNsaWVudCBkb2VzIG5vdCBoYXZlIGEgb3B0aW9uCiAqIHRvIGNoYW5nZSBoZWFkZXJzLCBidXQgYWZ0ZXIgc2lnbiBpbiB3ZSBoYXZlIHRvIHNldCB0aGUgand0IHRva2VuCiAqIFRvIHRvIHRoaXMgd2UgaGF2ZSB0byByZWluaXRpYWxpemUgdGhlIEFwaS4KICoKICogVG8gZW5zdXJlIGFsbCBjb21wb25lbnRzIGFsd2F5cyB1c2UgdGhlIGN1cnJlbnQgYXBpIHdlIHVzZSBhIHByb3h5IHRoYXQKICogcmV0dXJucyB0aGUgY29ycmVjdCBBcGkgb2JqZWN0IGZ1bmN0aW9uCiAqCiAqLwoKCnZhciBiYXNlQXBpUGFyYW1zID0gewogIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLAogIGhlYWRlcnM6IHsKICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICB9LAogIHJlZGlyZWN0OiAnZm9sbG93JywKICByZWZlcnJlclBvbGljeTogJ25vLXJlZmVycmVyJwp9Owp2YXIgYXBpV3JhcHBlciA9IHsKICBhcGk6IG5ldyBBcGkoewogICAgYmFzZVVybDogYmFzZVVybCwKICAgIGJhc2VBcGlQYXJhbXM6IGJhc2VBcGlQYXJhbXMKICB9KQp9OwoKZnVuY3Rpb24gY3JlYXRlQXBpUHJveHkoZm9vKSB7CiAgdmFyIGhhbmRsZXIgPSB7CiAgICBnZXQ6IGZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICAgIGlmIChBcGkucHJvdG90eXBlW3Byb3BdICE9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIGFwaVdyYXBwZXIuYXBpW3Byb3BdOwogICAgICB9CgogICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7CiAgICB9CiAgfTsKICByZXR1cm4gbmV3IFByb3h5KGZvbywgaGFuZGxlcik7Cn0KCmV4cG9ydCBmdW5jdGlvbiBzZXRCZWFyZXJUb2tlbih0b2tlbikgewogIGFwaVdyYXBwZXIuYXBpID0gbmV3IEFwaSh7CiAgICBiYXNlVXJsOiBiYXNlVXJsLAogICAgYmFzZUFwaVBhcmFtczogX29iamVjdFNwcmVhZCh7fSwgYmFzZUFwaVBhcmFtcywgewogICAgICBoZWFkZXJzOiBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlQXBpUGFyYW1zLmhlYWRlcnMsIHsKICAgICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0b2tlbgogICAgICB9KQogICAgfSkKICB9KTsKfQpleHBvcnQgZnVuY3Rpb24gcmVtb3ZlQmVhcmVyVG9rZW4oKSB7CiAgYXBpV3JhcHBlci5hcGkgPSBuZXcgQXBpKHsKICAgIGJhc2VVcmw6IGJhc2VVcmwKICB9KTsKfQpleHBvcnQgZGVmYXVsdCBjcmVhdGVBcGlQcm94eShhcGlXcmFwcGVyLmFwaSk7"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/api/index.ts"],"names":[],"mappings":";;;;AAAA,SAAS,GAAT,QAAmC,kBAAnC;AAEA,IAAI,OAAO,GAAW,MAAM,CAAC,QAAP,CAAgB,MAAtC;;AAEA,IACE,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,WAAvB,KACA,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,WAAvB,CAFF,EAGE;AACA,EAAA,OAAO,GAAG,qBAAV,CADA,CAEA;AACA;AACD;AACD;;;;;;;;;;;AAUA,IAAM,aAAa,GAAkB;AACnC,EAAA,WAAW,EAAE,aADsB;AAEnC,EAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAF0B;AAKnC,EAAA,QAAQ,EAAE,QALyB;AAMnC,EAAA,cAAc,EAAE;AANmB,CAArC;AASA,IAAM,UAAU,GAAG;AACjB,EAAA,GAAG,EAAE,IAAI,GAAJ,CAAQ;AACX,IAAA,OAAO,EAAE,OADE;AAEX,IAAA,aAAa,EAAE;AAFJ,GAAR;AADY,CAAnB;;AAOA,SAAS,cAAT,CAAwB,GAAxB,EAAgC;AAC9B,MAAM,OAAO,GAAG;AACd,IAAA,GAAG,EAAE,aAAC,MAAD,EAAc,IAAd,EAA+B,QAA/B,EAAgD;AACnD,UAAI,GAAG,CAAC,SAAJ,CAAc,IAAd,MAAwB,IAA5B,EAAkC;AAChC,eAAO,UAAU,CAAC,GAAX,CAAe,IAAf,CAAP;AACD;;AAED,aAAO,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,IAApB,EAA0B,QAA1B,CAAP;AACD;AAPa,GAAhB;AASA,SAAO,IAAI,KAAJ,CAAU,GAAV,EAAe,OAAf,CAAP;AACD;;AAED,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AAC1C,EAAA,UAAU,CAAC,GAAX,GAAiB,IAAI,GAAJ,CAAQ;AACvB,IAAA,OAAO,EAAE,OADc;AAEvB,IAAA,aAAa,oBACR,aADQ;AAEX,MAAA,OAAO,oBACF,aAAa,CAAC,OADZ;AAEL,QAAA,aAAa,EAAE,YAAY;AAFtB;AAFI;AAFU,GAAR,CAAjB;AAUD;AAED,OAAM,SAAU,iBAAV,GAA2B;AAC/B,EAAA,UAAU,CAAC,GAAX,GAAiB,IAAI,GAAJ,CAAQ;AACvB,IAAA,OAAO,EAAE;AADc,GAAR,CAAjB;AAGD;AAED,eAAe,cAAc,CAAC,UAAU,CAAC,GAAZ,CAA7B","sourcesContent":["import { Api, RequestParams } from '@/api/SwaggerApi'\n\nlet baseUrl: string = window.location.origin\n\nif (\n  location.host.includes('localhost') ||\n  location.host.includes('127.0.0.1')\n) {\n  baseUrl = 'http://localhost:80'\n  // Alternative config to run the app locally without root; see proxy conf\n  // baseUrl = 'http://localhost:8080/api'\n}\n/**\n * The npm package that creates the swagger client does not have a option\n * to change headers, but after sign in we have to set the jwt token\n * To to this we have to reinitialize the Api.\n *\n * To ensure all components always use the current api we use a proxy that\n * returns the correct Api object function\n *\n */\n\nconst baseApiParams: RequestParams = {\n  credentials: 'same-origin',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  redirect: 'follow',\n  referrerPolicy: 'no-referrer',\n}\n\nconst apiWrapper = {\n  api: new Api({\n    baseUrl: baseUrl,\n    baseApiParams: baseApiParams,\n  }),\n}\n\nfunction createApiProxy(foo: Api): Api { // Proxy<Foo> is compatible with Foo\n  const handler = {\n    get: (target: Api, prop: keyof Api, receiver: any) => {\n      if (Api.prototype[prop] !== null) {\n        return apiWrapper.api[prop]\n      }\n\n      return Reflect.get(target, prop, receiver)\n    },\n  }\n  return new Proxy(foo, handler)\n}\n\nexport function setBearerToken(token: string) {\n  apiWrapper.api = new Api({\n    baseUrl: baseUrl,\n    baseApiParams: {\n      ...baseApiParams,\n      headers: {\n        ...baseApiParams.headers,\n        Authorization: 'Bearer ' + token,\n      },\n    },\n  })\n}\n\nexport function removeBearerToken() {\n  apiWrapper.api = new Api({\n    baseUrl: baseUrl,\n  })\n}\n\nexport default createApiProxy(apiWrapper.api)\n"],"sourceRoot":""}]}