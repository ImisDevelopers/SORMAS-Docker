{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/SubmitTestResult.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/SubmitTestResult.vue","mtime":1589906836724},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2Npcm90emtpL3Byb2plY3RzL3ZpcnVzLzFfMDExX2FfaW5mZWt0aW9uc2ZhbGxfdWViZXJtaXR0ZWxsdW5nL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL2Npcm90emtpL3Byb2plY3RzL3ZpcnVzLzFfMDExX2FfaW5mZWt0aW9uc2ZhbGxfdWViZXJtaXR0ZWxsdW5nL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IEFwaSBmcm9tICdAL2FwaSc7CmltcG9ydCBUZXN0SW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL1Rlc3RJbnB1dC52dWUnOwppbXBvcnQgTGFib3JhdG9yeUlucHV0IGZyb20gJ0AvY29tcG9uZW50cy9MYWJvcmF0b3J5SW5wdXQudnVlJzsKaW1wb3J0IERhdGVJbnB1dCBmcm9tICdAL2NvbXBvbmVudHMvRGF0ZUlucHV0LnZ1ZSc7CmltcG9ydCB7IGF1dGhNYXBwZXIgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXV0aC5tb2R1bGUnOwppbXBvcnQgeyB0ZXN0UmVzdWx0cyB9IGZyb20gJ0AvbW9kZWxzL2V2ZW50LXR5cGVzJzsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwpleHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHsKICBuYW1lOiAnU3VibWl0VGVzdFJlc3VsdCcsCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIGF1dGhNYXBwZXIubWFwR2V0dGVycyh7CiAgICBpbnN0aXR1dGlvbjogJ2luc3RpdHV0aW9uJwogIH0pKSwKICBjb21wb25lbnRzOiB7CiAgICBUZXN0SW5wdXQ6IFRlc3RJbnB1dCwKICAgIExhYm9yYXRvcnlJbnB1dDogTGFib3JhdG9yeUlucHV0LAogICAgRGF0ZUlucHV0OiBEYXRlSW5wdXQKICB9LAogIHByb3BzOiB7fSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZm9ybTogdGhpcy4kZm9ybS5jcmVhdGVGb3JtKHRoaXMpLAogICAgICBmaWxlQnl0ZXM6IHVuZGVmaW5lZCwKICAgICAgLy8gVE9ETzogQWZ0ZXIgc2ltdWxhdGlvbiwgcmVtb3ZlIHRoZSBmaWx0ZXIKICAgICAgdGVzdFJlc3VsdHM6IHRlc3RSZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAodGVzdFJlc3VsdCkgewogICAgICAgIHJldHVybiB0ZXN0UmVzdWx0LmlkID09PSAnVEVTVF9QT1NJVElWRScgfHwgdGVzdFJlc3VsdC5pZCA9PT0gJ1RFU1RfTkVHQVRJVkUnOwogICAgICB9KSwKICAgICAgbGFib3JhdG9yaWVzOiBbXSwKICAgICAgdXBkYXRlZExhYlRlc3Q6IHVuZGVmaW5lZCwKICAgICAgdXBkYXRlZExhYlRlc3RTdGF0dXM6ICcnLAogICAgICB0b2RheTogbW9tZW50KCkKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgbGFiOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKF90aGlzLmluc3RpdHV0aW9uKCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZGluZyBpbnN0aXR1dGlvbicpOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRBdXRoZW50aWNhdGVkSW5zdGl0dXRpb24oKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBsYWIgPSBfdGhpcy5pbnN0aXR1dGlvbigpOwoKICAgICAgICAgICAgICBpZiAobGFiICYmIGxhYi50eXBlID09PSAnTEFCT1JBVE9SWScpIHsKICAgICAgICAgICAgICAgIF90aGlzLmxhYm9yYXRvcmllcyA9IFtsYWJdOwoKICAgICAgICAgICAgICAgIF90aGlzLmZvcm0uc2V0RmllbGRzVmFsdWUoewogICAgICAgICAgICAgICAgICBsYWJvcmF0b3J5SWQ6IGxhYi5pZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF90aGlzLmZvcm0uc2V0RmllbGRzVmFsdWUoewogICAgICAgICAgICAgICAgICBsYWJvcmF0b3J5SWQ6ICcnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBtZXRob2RzOiBfb2JqZWN0U3ByZWFkKHt9LCBhdXRoTWFwcGVyLm1hcEFjdGlvbnMoewogICAgZ2V0QXV0aGVudGljYXRlZEluc3RpdHV0aW9uOiAnZ2V0QXV0aGVudGljYXRlZEluc3RpdHV0aW9uJwogIH0pLCB7CiAgICB1cGxvYWRIaW50OiBmdW5jdGlvbiB1cGxvYWRIaW50KCkgewogICAgICB2YXIgbm90aWZpY2F0aW9uID0gewogICAgICAgIG1lc3NhZ2U6ICdEYXMgTGFib3Iga2FubiBoaWVyIGRlbiBCZXJpY2h0IG1pdCBob2NobGFkZW4uIEF1cyBTaWNoZXJoZWl0c2dyw7xuZGVuIGlzdCBkaWVzZSBGdW5rdGlvbiBpbSBQcm90b3R5cCBkZWFrdGl2aWVydC4nLAogICAgICAgIGRlc2NyaXB0aW9uOiAnJwogICAgICB9OwogICAgICB0aGlzLiRub3RpZmljYXRpb24uaW5mbyhub3RpZmljYXRpb24pOwogICAgfSwKICAgIGJlZm9yZVVwbG9hZDogZnVuY3Rpb24gYmVmb3JlVXBsb2FkKGZpbGUpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgc2V0RmlsZUJ5dGVzID0gZnVuY3Rpb24gc2V0RmlsZUJ5dGVzKGZpbGVCeXRlcykgewogICAgICAgIF90aGlzMi5maWxlQnl0ZXMgPSBmaWxlQnl0ZXM7CiAgICAgIH07CgogICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciB1dGY4ID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGUudGFyZ2V0LnJlc3VsdCkpOwogICAgICAgIHZhciBhcnJheSA9IFtdOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV0ZjgubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGFycmF5LnB1c2godXRmOC5jaGFyQ29kZUF0KGkpKTsKICAgICAgICB9CgogICAgICAgIHNldEZpbGVCeXRlcyhhcnJheSk7CiAgICAgIH07CgogICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIGhhbmRsZVN1Ym1pdDogZnVuY3Rpb24gaGFuZGxlU3VibWl0KCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMuZm9ybS52YWxpZGF0ZUZpZWxkcyhmdW5jdGlvbiAoZXJyLCB2YWx1ZXMpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgdGVzdElkID0gdmFsdWVzLnRlc3RJZDsKICAgICAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgICAgIHRlc3RJZDogdGVzdElkLAogICAgICAgICAgc3RhdHVzOiB2YWx1ZXMudGVzdFJlc3VsdCwKICAgICAgICAgIGNvbW1lbnQ6IHZhbHVlcy5jb21tZW50LAogICAgICAgICAgZmlsZTogX3RoaXMzLmZpbGVCeXRlcywKICAgICAgICAgIGV2ZW50RGF0ZTogdmFsdWVzLmV2ZW50RGF0ZQogICAgICAgIH07CiAgICAgICAgQXBpLnVwZGF0ZVRlc3RTdGF0dXNVc2luZ1B1dCh2YWx1ZXMubGFib3JhdG9yeUlkLCByZXF1ZXN0KS50aGVuKGZ1bmN0aW9uIChsYWJUZXN0KSB7CiAgICAgICAgICB2YXIgX3Rlc3RSZXN1bHRzJGZpbmQ7CgogICAgICAgICAgX3RoaXMzLmZvcm0ucmVzZXRGaWVsZHMoWyd0ZXN0SWQnLCAndGVzdFJlc3VsdCcsICdjb21tZW50J10pOwoKICAgICAgICAgIF90aGlzMy5maWxlQnl0ZXMgPSBudWxsOwogICAgICAgICAgdmFyIHVwZGF0ZWRMYWJUZXN0ID0gbGFiVGVzdDsKICAgICAgICAgIHZhciB1cGRhdGVkTGFiVGVzdFN0YXR1cyA9ICgoX3Rlc3RSZXN1bHRzJGZpbmQgPSB0ZXN0UmVzdWx0cy5maW5kKGZ1bmN0aW9uICh0ZXN0UmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiB0ZXN0UmVzdWx0LmlkID09PSBsYWJUZXN0LnRlc3RTdGF0dXM7CiAgICAgICAgICB9KSkgPT09IG51bGwgfHwgX3Rlc3RSZXN1bHRzJGZpbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90ZXN0UmVzdWx0cyRmaW5kLmxhYmVsKSB8fCAnJzsKICAgICAgICAgIHZhciBoID0gX3RoaXMzLiRjcmVhdGVFbGVtZW50OwoKICAgICAgICAgIF90aGlzMy4kc3VjY2Vzcyh7CiAgICAgICAgICAgIHRpdGxlOiAnRGVyIFRlc3Qgd3VyZGUgZXJmb2xncmVpY2ggYWt0dWFsaXNpZXJ0LicsCiAgICAgICAgICAgIGNvbnRlbnQ6IGgoJ2RpdicsIHt9LCBbaCgnZGl2JywgIlRlc3QgSUQ6ICIuY29uY2F0KHVwZGF0ZWRMYWJUZXN0LnRlc3RJZCkpLCBoKCdkaXYnLCAiTmV1ZXIgVGVzdCBTdGF0dXM6ICIuY29uY2F0KHVwZGF0ZWRMYWJUZXN0U3RhdHVzKSldKQogICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IHsKICAgICAgICAgICAgbWVzc2FnZTogJ0ZlaGxlciBiZWltIEhpbnp1ZsO8Z2VuIGRlcyBUZXN0ZXJnZWJuaXNzZXMuJywKICAgICAgICAgICAgZGVzY3JpcHRpb246IGVyci5tZXNzYWdlCiAgICAgICAgICB9OwoKICAgICAgICAgIF90aGlzMy4kbm90aWZpY2F0aW9uLmVycm9yKG5vdGlmaWNhdGlvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0pCn0pOw=="},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/SubmitTestResult.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Institution, LabTest } from '@/api/SwaggerApi'\nimport Vue from 'vue'\nimport Api from '@/api'\nimport TestInput from '@/components/TestInput.vue'\nimport LaboratoryInput from '@/components/LaboratoryInput.vue'\nimport DateInput from '@/components/DateInput.vue'\nimport { authMapper } from '@/store/modules/auth.module'\nimport { testResults, TestResultType } from '@/models/event-types'\nimport moment from 'moment'\n\ninterface State {\n  form: any\n  fileBytes?: any\n  testResults: TestResultType[]\n  laboratories: Institution[]\n  updatedLabTest?: LabTest\n  updatedLabTestStatus: string\n  today: moment.Moment\n}\n\nexport default Vue.extend({\n  name: 'SubmitTestResult',\n  computed: {\n    ...authMapper.mapGetters({ institution: 'institution' }),\n  },\n  components: {\n    TestInput,\n    LaboratoryInput,\n    DateInput,\n  },\n  props: {},\n  data(): State {\n    return {\n      form: this.$form.createForm(this),\n      fileBytes: undefined,\n      // TODO: After simulation, remove the filter\n      testResults: testResults.filter(\n        (testResult) =>\n          testResult.id === 'TEST_POSITIVE' || testResult.id === 'TEST_NEGATIVE'\n      ),\n      laboratories: [],\n      updatedLabTest: undefined,\n      updatedLabTestStatus: '',\n      today: moment(),\n    }\n  },\n  async mounted() {\n    if (!this.institution()) {\n      console.log('Loading institution')\n      await this.getAuthenticatedInstitution()\n    }\n    const lab = this.institution()\n    if (lab && lab.type === 'LABORATORY') {\n      this.laboratories = [lab]\n      this.form.setFieldsValue({\n        laboratoryId: lab.id,\n      })\n    } else {\n      this.form.setFieldsValue({\n        laboratoryId: '',\n      })\n    }\n  },\n  methods: {\n    ...authMapper.mapActions({\n      getAuthenticatedInstitution: 'getAuthenticatedInstitution',\n    }),\n    uploadHint() {\n      const notification = {\n        message:\n          'Das Labor kann hier den Bericht mit hochladen. Aus Sicherheitsgründen ist diese Funktion im Prototyp deaktiviert.',\n        description: '',\n      }\n      this.$notification.info(notification)\n    },\n    beforeUpload(file: File) {\n      const setFileBytes = (fileBytes: any) => {\n        this.fileBytes = fileBytes\n      }\n\n      const reader = new FileReader()\n      reader.onload = (e: any) => {\n        const utf8 = unescape(encodeURIComponent(e.target.result))\n        const array = []\n        for (let i = 0; i < utf8.length; i++) {\n          array.push(utf8.charCodeAt(i))\n        }\n        setFileBytes(array)\n      }\n      reader.readAsDataURL(file)\n\n      return false\n    },\n    handleSubmit() {\n      this.form.validateFields((err: Error, values: any) => {\n        if (err) {\n          return\n        }\n\n        const { testId } = values\n        const request = {\n          testId,\n          status: values.testResult,\n          comment: values.comment,\n          file: this.fileBytes,\n          eventDate: values.eventDate,\n        }\n\n        Api.updateTestStatusUsingPut(values.laboratoryId, request)\n          .then((labTest) => {\n            this.form.resetFields(['testId', 'testResult', 'comment'])\n            this.fileBytes = null\n            const updatedLabTest = labTest\n            const updatedLabTestStatus =\n              testResults.find(\n                (testResult) => testResult.id === labTest.testStatus\n              )?.label || ''\n            const h = this.$createElement\n            this.$success({\n              title: 'Der Test wurde erfolgreich aktualisiert.',\n              content: h('div', {}, [\n                h('div', `Test ID: ${updatedLabTest.testId}`),\n                h('div', `Neuer Test Status: ${updatedLabTestStatus}`),\n              ]),\n            })\n          })\n          .catch((err) => {\n            const notification = {\n              message: 'Fehler beim Hinzufügen des Testergebnisses.',\n              description: err.message,\n            }\n            this.$notification.error(notification)\n          })\n      })\n    },\n  },\n})\n"],"sourceRoot":""}]}