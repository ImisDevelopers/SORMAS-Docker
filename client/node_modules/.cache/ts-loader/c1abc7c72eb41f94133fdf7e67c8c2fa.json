{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/LaboratoryInput.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/LaboratoryInput.vue","mtime":1589906836721},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvY2lyb3R6a2kvcHJvamVjdHMvdmlydXMvMV8wMTFfYV9pbmZla3Rpb25zZmFsbF91ZWJlcm1pdHRlbGx1bmcvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IEFwaSBmcm9tICdAL2FwaSc7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKZXhwb3J0IGRlZmF1bHQgVnVlLmV4dGVuZCh7CiAgbmFtZTogJ0xhYm9yYXRvcnlJbnB1dCcsCiAgcHJvcHM6IFsnaW5pdGlhbExhYnMnLCAndmFsaWRhdGlvbicsICdsYWJlbCcsICdmb3JtJywgJ2Rpc2FibGVkJ10sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlc3VsdDogW10KICAgIH07CiAgfSwKICB3YXRjaDogewogICAgaW5pdGlhbExhYnM6IGZ1bmN0aW9uIGluaXRpYWxMYWJzKGxhYnMpIHsKICAgICAgaWYgKGxhYnMgJiYgbGFicy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5yZXN1bHQgPSBsYWJzOwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBoYW5kbGVTZWFyY2g6IGZ1bmN0aW9uIGhhbmRsZVNlYXJjaCh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmVzdWx0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPCAyKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBBcGkucXVlcnlBbGxMYWJvcmF0b3JpZXNVc2luZ0dldCh7CiAgICAgICAgICAgICAgICAgIGlkOiB2YWx1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF90aGlzLnJlc3VsdCA9IHJlc3VsdDsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfSk7"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/LaboratoryInput.vue?vue&type=script&lang=ts&"],"names":[],"mappings":";;AAkBA,OAAO,GAAP,MAAgB,OAAhB;AACA,OAAO,GAAP,MAAgB,KAAhB;AAcA,eAAe,GAAG,CAAC,MAAJ,CAAW;AACxB,EAAA,IAAI,EAAE,iBADkB;AAExB,EAAA,KAAK,EAAE,CAAC,aAAD,EAAgB,YAAhB,EAA8B,OAA9B,EAAuC,MAAvC,EAA+C,UAA/C,CAFiB;AAGxB,EAAA,IAHwB,kBAGpB;AACF,WAAO;AACL,MAAA,MAAM,EAAE;AADH,KAAP;AAGD,GAPuB;AAQxB,EAAA,KAAK,EAAE;AACL,IAAA,WAAW,EAAE,qBAAU,IAAV,EAAc;AACzB,UAAI,IAAI,IAAI,IAAI,CAAC,MAAL,GAAc,CAA1B,EAA6B;AAC3B,aAAK,MAAL,GAAc,IAAd;AACD;AACF;AALI,GARiB;AAexB,EAAA,OAAO,EAAE;AACD,IAAA,YADC,wBACY,KADZ,EACyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAE1B,CAAC,KAAD,IAAU,KAAK,CAAC,MAAN,GAAe,CAFC;AAAA;AAAA;AAAA;;AAG5B,gBAAA,MAAM,GAAG,EAAT;AAH4B;AAAA;;AAAA;AAAA;AAAA,uBAKb,GAAG,CAAC,4BAAJ,CAAiC;AAAE,kBAAA,EAAE,EAAE;AAAN,iBAAjC,CALa;;AAAA;AAK5B,gBAAA,MAL4B;;AAAA;AAO9B,gBAAA,KAAI,CAAC,MAAL,GAAc,MAAd;;AAP8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ/B;AATM;AAfe,CAAX,CAAf","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Api from '@/api'\nimport Vue from 'vue'\nimport { Laboratory } from '@/api/SwaggerApi'\n\n/**\n * Input that supports 1d and 2d Barcodes\n *\n * props:\n * - validation: put in v-decorator object\n */\n\nexport interface State {\n  result: Laboratory[]\n}\n\nexport default Vue.extend({\n  name: 'LaboratoryInput',\n  props: ['initialLabs', 'validation', 'label', 'form', 'disabled'],\n  data(): State {\n    return {\n      result: [],\n    }\n  },\n  watch: {\n    initialLabs: function (labs) {\n      if (labs && labs.length > 0) {\n        this.result = labs\n      }\n    },\n  },\n  methods: {\n    async handleSearch(value: string) {\n      let result: Laboratory[]\n      if (!value || value.length < 2) {\n        result = []\n      } else {\n        result = await Api.queryAllLaboratoriesUsingGet({ id: value })\n      }\n      this.result = result\n    },\n  },\n})\n"],"sourceRoot":""}]}