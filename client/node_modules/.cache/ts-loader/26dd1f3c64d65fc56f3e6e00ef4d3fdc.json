{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/plz-service.ts","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/plz-service.ts","mtime":1586713315430},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js","mtime":1584795992192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2Npcm90emtpL3Byb2plY3RzL3ZpcnVzLzFfMDExX2FfaW5mZWt0aW9uc2ZhbGxfdWViZXJtaXR0ZWxsdW5nL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Cgp2YXIgc2FmZVBhcnNlUmVzcG9uc2UgPSBmdW5jdGlvbiBzYWZlUGFyc2VSZXNwb25zZShyZXNwb25zZSkgewogIHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgcmV0dXJuIGRhdGE7CiAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiByZXNwb25zZS50ZXh0OwogIH0pOwp9OwoKZXhwb3J0IGZ1bmN0aW9uIGdldFBsenMoX3gpIHsKICByZXR1cm4gX2dldFBsenMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldFBsenMoKSB7CiAgX2dldFBsenMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHBseikgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGZldGNoKCdodHRwczovL3B1YmxpYy5vcGVuZGF0YXNvZnQuY29tL2FwaS9yZWNvcmRzLzEuMC9zZWFyY2gvP2RhdGFzZXQ9cG9zdGxlaXR6YWhsZW4tZGV1dHNjaGxhbmQmZmFjZXQ9cGx6JnE9JyArIHBseiwgewogICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcKICAgICAgICAgICAgfSkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShyZXNwb25zZSkgewogICAgICAgICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2FmZVBhcnNlUmVzcG9uc2UocmVzcG9uc2UpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZGF0YTsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGRhdGEucmVjb3Jkcyk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSgpKSk7CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwogIHJldHVybiBfZ2V0UGx6cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/plz-service.ts"],"names":[],"mappings":";;;;AAAA,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAmB,QAAnB;AAAA,SACxB,QAAQ,CACL,IADH,GAEG,IAFH,CAEQ,UAAC,IAAD;AAAA,WAAU,IAAV;AAAA,GAFR,EAGG,KAHH,CAGS,UAAC,CAAD;AAAA,WAAO,QAAQ,CAAC,IAAhB;AAAA,GAHT,CADwB;AAAA,CAA1B;;AAeA,gBAAsB,OAAtB;AAAA;AAAA;;;qEAAO,kBAAuB,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,KAAK,CAAC,4GAA4G,GAA7G,EAAkH;AAC5H,cAAA,MAAM,EAAE;AADoH,aAAlH,CAAL,CAEJ,IAFI;AAAA,iFAEC,iBAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACa,iBAAiB,CAAW,QAAX,CAD9B;;AAAA;AACA,wBAAA,IADA;;AAAA,4BAED,QAAQ,CAAC,EAFR;AAAA;AAAA;AAAA;;AAAA,8BAEkB,IAFlB;;AAAA;AAAA,yDAGC,IAAI,CAAC,OAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFD;;AAAA;AAAA;AAAA;AAAA,gBADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const safeParseResponse = <T = any, E = any>(response: Response): Promise<T> =>\n  response\n    .json()\n    .then((data) => data)\n    .catch((e) => response.text)\n\nexport interface PlzFields {\n  plz: string;\n  note: string; // city\n}\n\nexport interface Plz {\n  fields: PlzFields;\n}\n\nexport async function getPlzs(plz: string): Promise<Plz[]> {\n  return fetch('https://public.opendatasoft.com/api/records/1.0/search/?dataset=postleitzahlen-deutschland&facet=plz&q=' + plz, {\n    method: 'GET',\n  }).then(async(response) => {\n    const data = await safeParseResponse<any, any>(response)\n    if (!response.ok) throw data\n    return data.records\n  })\n}\n"],"sourceRoot":""}]}