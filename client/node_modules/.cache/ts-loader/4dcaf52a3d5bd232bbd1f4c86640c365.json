{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/typing.ts","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/typing.ts","mtime":1589906836721},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js","mtime":1584795992192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIFR5cGVzY3JpcHQgdXRpbGl0eSBtb2R1bGUuCiAqLwoKLyoqCiAqIFR5cGVBcmcgZ2VuZXJhdG9yLiBUaGlzIGZ1bmN0aW9uIG1heSBiZSBjYWxsZWQgZm9yIGFueSBUeXBlQXJnIGZ1bmN0aW9uCiAqIGFyZ3VtZW50IHRvIHByb3ZpZGUgYSB0eXBlIGZvciB0eXBlIGluZmVycmVuY2UuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uJ3Mgc29sZSBwdXJwb3NlIGlzIHR5cGUgaW5mZXJyZW5jZSBhbmQgbm8gYWN0dWFsCiAqIG9iamVjdCBpcyBjcmVhdGVkLgogKi8KZXhwb3J0IGZ1bmN0aW9uIFR5cGVBcmcoKSB7CiAgcmV0dXJuIG51bGw7Cn0KLyoqCiAqIFNpbXBsZSBjYXN0IGF2b2lkaW5nIGV4cGxpY2l0IGNvbnZlcnNpb24gdG8gdW5rbm93bi4KICovCgpleHBvcnQgZnVuY3Rpb24gY2FzdChhcmcsIF8pIHsKICByZXR1cm4gYXJnOwp9Ci8qKgogKiBJZGVudGl0eSBmdW5jdGlvbiB0ZWxsaW5nIHRoZSBUeXBlc2NyaXB0IGNvbXBpbGVyIHRoYXQgdGhlIHN1cHBsaWVkIGFyZ3VtZW50CiAqIGlzIGFkZGl0aW9uYWxseSBzdXBwb3J0aW5nIGRhdGEgYW5kIG9wZXJhdGlvbnMgZnJvbSB0aGUgZ2l2ZW4gZXh0ZW5zaW9uIHR5cGUuCiAqIFRoaXMgZnVuY3Rpb24gbWF5IGJlIHVzZWQgaW4gY29udGV4dHMgd2hlcmUgY3VycmVudCB0eXBlIGluZmVycmVuY2UgbWVjaGFuaXNtcwogKiBmYWlsIGF0IHJlc29sdmluZyBhbGwgb2YgdGhlIGZ1bmN0aW9uYWxpdHkgYSB0eXBlIGlzIGFjdHVhbGx5IGNhcGFibGUgb2YuCiAqCiAqIEFuIGV4YW1wbGUgdXNlIGNhc2UgaXMgdGhlIHVzZSBvZiBtaXhpbnMgb3IgaW5qZWN0aW9ucyBmb3IgVnVlIGNvbXBvbmVudHMsCiAqIHdoaWNoIGN1cnJlbnRseSBjYW5ub3QgYmUgc3VmZmljaWVudGx5IGluZmVycmVkLgogKi8KCmV4cG9ydCBmdW5jdGlvbiBleHRlbmRlZChvYmosIF8pIHsKICByZXR1cm4gb2JqOwp9"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/typing.ts"],"names":[],"mappings":"AAAA;;;;AAOA;;;;;;;AAOA,OAAM,SAAU,OAAV,GAAiB;AACrB,SAAQ,IAAR;AACD;AAED;;;;AAGA,OAAM,SAAU,IAAV,CAAkB,GAAlB,EAAgC,CAAhC,EAA8C;AAClD,SAAO,GAAP;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAU,QAAV,CACJ,GADI,EAEJ,CAFI,EAEqB;AAEzB,SAAO,GAAP;AACD","sourcesContent":["/**\n * Typescript utility module.\n */\n\n/// Type representing a Type parameter to be passed to a type-inferring function.\nexport type TypeArg<T> = T\n\n/**\n * TypeArg generator. This function may be called for any TypeArg function\n * argument to provide a type for type inferrence.\n *\n * Note that this function's sole purpose is type inferrence and no actual\n * object is created.\n */\nexport function TypeArg<T>(): TypeArg<T> {\n  return (null as unknown) as TypeArg<T>\n}\n\n/**\n * Simple cast avoiding explicit conversion to unknown.\n */\nexport function cast<T>(arg: unknown, _?: TypeArg<T>) {\n  return arg as T\n}\n\n/**\n * Identity function telling the Typescript compiler that the supplied argument\n * is additionally supporting data and operations from the given extension type.\n * This function may be used in contexts where current type inferrence mechanisms\n * fail at resolving all of the functionality a type is actually capable of.\n *\n * An example use case is the use of mixins or injections for Vue components,\n * which currently cannot be sufficiently inferred.\n */\nexport function extended<T, ExtensionType>(\n  obj: T,\n  _: TypeArg<ExtensionType>\n): T & ExtensionType {\n  return obj as T & ExtensionType\n}\n"],"sourceRoot":""}]}