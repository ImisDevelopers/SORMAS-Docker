{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/PatientInput.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/PatientInput.vue","mtime":1589906836721},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvY2lyb3R6a2kvcHJvamVjdHMvdmlydXMvMV8wMTFfYV9pbmZla3Rpb25zZmFsbF91ZWJlcm1pdHRlbGx1bmcvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvaG9tZS9jaXJvdHpraS9wcm9qZWN0cy92aXJ1cy8xXzAxMV9hX2luZmVrdGlvbnNmYWxsX3VlYmVybWl0dGVsbHVuZy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKaW1wb3J0IF90eXBlb2YgZnJvbSAiL2hvbWUvY2lyb3R6a2kvcHJvamVjdHMvdmlydXMvMV8wMTFfYV9pbmZla3Rpb25zZmFsbF91ZWJlcm1pdHRlbGx1bmcvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgQXBpIGZyb20gJ0AvYXBpJzsKaW1wb3J0IG1peGlucyBmcm9tICd2dWUtdHlwZWQtbWl4aW5zJzsKaW1wb3J0IHsgRm9ybUNvbnRyb2xNaXhpbiB9IGZyb20gJ0AvdXRpbC9mb3Jtcyc7Ci8qKgogKiBBdXRvY29tcGxldGUgZm9yIFBhdGllbnRzCiAqCiAqIHByb3BzOgogKiAtIHZhbGlkYXRpb246IHB1dCBpbiB2LWRlY29yYXRvciBvYmplY3QKICovCgpleHBvcnQgZGVmYXVsdCBtaXhpbnMoRm9ybUNvbnRyb2xNaXhpbikuZXh0ZW5kKHsKICBuYW1lOiAnUGF0aWVudElucHV0JywKICBpbmhlcml0QXR0cnM6IGZhbHNlLAogIHByb3BzOiB7CiAgICBwbGFjZWhvbGRlcjogewogICAgICBkZWZhdWx0OiAnU3VjaGUgw7xiZXIgSUQsIE5hbWUsIFRlbGVmb24sIE1haWwnCiAgICB9LAogICAgdmFsdWU6IHsKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICBmaWx0ZXJPcHRpb246IHsKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAogIG1vZGVsOiB7CiAgICBwcm9wOiAndmFsdWUnLAogICAgZXZlbnQ6ICdjaGFuZ2UnCiAgfSwKICBmaWVsZFZhbHVlQ29udmVydDogZnVuY3Rpb24gZmllbGRWYWx1ZUNvbnZlcnQodmFsKSB7CiAgICB2YXIgaGFzUHJvcCA9IGZ1bmN0aW9uIGhhc1Byb3Aob2JqLCBwcm9wKSB7CiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsKICAgIH07CgogICAgaWYgKF90eXBlb2YodmFsKSA9PT0gJ29iamVjdCcgJiYgaGFzUHJvcCh2YWwsICdpZCcpKSB7CiAgICAgIHZhciBwYXRpZW50ID0gdmFsOwogICAgICB0aGlzLnJlc3VsdCA9IFt7CiAgICAgICAgbGFiZWw6IHRoaXMuZ2V0UGF0aWVudExhYmVsKHBhdGllbnQpLAogICAgICAgIHZhbHVlOiBwYXRpZW50LmlkCiAgICAgIH1dOwogICAgICByZXR1cm4gcGF0aWVudC5pZCB8fCAnJzsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiB2YWw7CiAgICB9CiAgfSwKICBpbmplY3Q6IHsKICAgIEZvcm1Db250ZXh0OiB7CiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlc3VsdDogW10KICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgZXh0ZXJuTGlzdGVuZXJzOiBmdW5jdGlvbiBleHRlcm5MaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpcyQkbGlzdGVuZXJzID0gdGhpcy4kbGlzdGVuZXJzLAogICAgICAgICAgc2VhcmNoID0gX3RoaXMkJGxpc3RlbmVycy5zZWFyY2gsCiAgICAgICAgICBsaXN0ZW5lcnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkJGxpc3RlbmVycywgWyJzZWFyY2giXSk7CgogICAgICByZXR1cm4gbGlzdGVuZXJzOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0UGF0aWVudExhYmVsOiBmdW5jdGlvbiBnZXRQYXRpZW50TGFiZWwocGF0aWVudERhdGEpIHsKICAgICAgcmV0dXJuICIiLmNvbmNhdChwYXRpZW50RGF0YS5maXJzdE5hbWUsICIgIikuY29uY2F0KHBhdGllbnREYXRhLmxhc3ROYW1lLCAiICgiKS5jb25jYXQocGF0aWVudERhdGEuaWQsICIpIik7CiAgICB9LAogICAgaGFuZGxlU2VhcmNoOiBmdW5jdGlvbiBoYW5kbGVTZWFyY2godmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoISghdmFsdWUgfHwgdmFsdWUubGVuZ3RoIDwgMikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gQXBpLnF1ZXJ5UGF0aWVudHNTaW1wbGVVc2luZ1Bvc3QoewogICAgICAgICAgICAgICAgICBxdWVyeTogdmFsdWUsCiAgICAgICAgICAgICAgICAgIG9mZnNldFBhZ2U6IDAsCiAgICAgICAgICAgICAgICAgIHBhZ2VTaXplOiAxMCwKICAgICAgICAgICAgICAgICAgb3JkZXI6ICdhc2MnLAogICAgICAgICAgICAgICAgICBvcmRlckJ5OiAnbGFzdE5hbWUnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX3RoaXMucmVzdWx0ID0gcmVzdWx0Lm1hcChmdW5jdGlvbiAocGF0aWVudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiBfdGhpcy5nZXRQYXRpZW50TGFiZWwocGF0aWVudCksCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHBhdGllbnQuaWQKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9KTs="},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/components/PatientInput.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Api from '@/api'\nimport Vue from 'vue'\nimport mixins from 'vue-typed-mixins'\nimport { Select } from 'ant-design-vue'\nimport { Patient } from '@/api/SwaggerApi'\nimport { FormControlMixin } from '@/util/forms'\n\ndeclare interface State {\n  result: {\n    label?: string\n    value?: string\n  }[]\n}\n\n/**\n * Autocomplete for Patients\n *\n * props:\n * - validation: put in v-decorator object\n */\n\nexport default mixins(FormControlMixin).extend({\n  name: 'PatientInput',\n  inheritAttrs: false,\n  props: {\n    placeholder: { default: 'Suche Ã¼ber ID, Name, Telefon, Mail' },\n    value: { default: '' },\n    filterOption: { default: false },\n  },\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  fieldValueConvert(val: any): string {\n    const hasProp = (obj: Record<string, any>, prop: string): boolean =>\n      Object.prototype.hasOwnProperty.call(obj, prop)\n\n    if (typeof val === 'object' && hasProp(val, 'id')) {\n      const patient = val as Patient\n      this.result = [\n        {\n          label: this.getPatientLabel(patient),\n          value: patient.id,\n        },\n      ]\n      return patient.id || ''\n    } else {\n      return val\n    }\n  },\n  inject: {\n    FormContext: { default: () => ({}) },\n  },\n  data(): State {\n    return {\n      result: [],\n    }\n  },\n  computed: {\n    externListeners() {\n      const { search, ...listeners } = this.$listeners\n      return listeners\n    },\n  },\n  methods: {\n    getPatientLabel(patientData: Patient) {\n      return `${patientData.firstName} ${patientData.lastName} (${patientData.id})`\n    },\n    async handleSearch(value: string) {\n      let result: Patient[]\n      if (!value || value.length < 2) {\n        result = []\n      } else {\n        result = await Api.queryPatientsSimpleUsingPost({\n          query: value,\n          offsetPage: 0,\n          pageSize: 10,\n          order: 'asc',\n          orderBy: 'lastName',\n        })\n      }\n      this.result = result.map((patient: Patient) => ({\n        label: this.getPatientLabel(patient),\n        value: patient.id,\n      }))\n    },\n  },\n})\n"],"sourceRoot":""}]}