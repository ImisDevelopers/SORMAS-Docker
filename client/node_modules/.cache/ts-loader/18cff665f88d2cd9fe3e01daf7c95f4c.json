{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/store/modules/auth.module.ts","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/store/modules/auth.module.ts","mtime":1586713315430},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js","mtime":1584795992192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/store/modules/auth.module.ts"],"names":[],"mappings":"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","sourcesContent":["import Api, { removeBearerToken, setBearerToken } from '@/api'\nimport { Institution, RegisterUserRequest, User } from '@/api/SwaggerApi'\nimport { config } from '@/config'\nimport { InstitutionRole } from '@/models'\nimport router, { AppRoute, navigationRoutes } from '@/router'\nimport { parseJwt } from '@/util'\nimport { Vue } from 'vue/types/vue'\nimport { Actions, createMapper, Getters, Module, Mutations } from 'vuex-smart-module'\n\ninterface JwtData {\n  roles: InstitutionRole[];\n  exp: number;\n\n  [key: string]: any;\n}\n\nclass AuthState {\n  jwtToken: string | undefined = undefined\n  jwtData: JwtData | undefined = undefined\n  user: User | undefined = undefined\n  institution: Institution | undefined = undefined\n}\n\nclass AuthGetters extends Getters<AuthState> {\n  isAuthenticated(): boolean {\n    return !!this.state.jwtToken // add is valid check expire date\n  }\n\n  institution(): Institution | undefined {\n    return this.state.institution\n  }\n\n  roles() {\n    return this.state.jwtData?.roles || []\n  }\n\n  routes(): AppRoute[] {\n    return navigationRoutes\n      .filter(r => (config.showAllViews ||\n        this.getters.roles().some(a => r.meta?.navigationInfo?.authorities.includes(a))))\n  }\n\n  institutionUsers() {\n    return this.state.institution?.users?.map(user => ({\n      ...user,\n      role: user.authorities?.length === 2 ? user.authorities[1].authority : '',\n    }))\n  }\n}\n\nclass AuthMutations extends Mutations<AuthState> {\n  loginSuccess(jwtToken: string) {\n    this.state.jwtToken = jwtToken\n    this.state.jwtData = parseJwt(jwtToken)\n    setBearerToken(jwtToken)\n  }\n\n  logoutSuccess() {\n    this.state.jwtToken = undefined\n    this.state.jwtData = undefined\n    removeBearerToken()\n  }\n\n  setAuthenticatedInstitution(institution: Institution) {\n    this.state.institution = institution\n  }\n\n  setUser(user: User) {\n    this.state.user = user\n  }\n}\n\nclass AuthActions extends Actions<AuthState, AuthGetters, AuthMutations, AuthActions> {\n  async login(payload: { username: string; password: string }) {\n    // # TODO loading animation, encrypt jwt\n    const token: string | undefined = (await Api.api.signInUserUsingPost({\n      username: payload.username,\n      password: payload.password,\n    })).jwtToken\n    if (token) {\n      this.commit('loginSuccess', token)\n      this.dispatch('getAuthenticatedInstitution')\n      this.dispatch('getAuthenticatedUser')\n      window.localStorage.setItem('token', '' + token)\n      router.push({ name: 'app' })\n    }\n  }\n\n  async logout() {\n    // # TODO logout request\n    this.commit('logoutSuccess')\n    window.localStorage.clear()\n    // # TODO empty state\n    router.push({ name: 'login' })\n  }\n\n  async init() {\n    const jwtToken = window.localStorage.token\n    if (jwtToken) {\n      const decoded = parseJwt(jwtToken)\n      const now = new Date()\n      const tokenExpireDate = new Date(decoded.exp * 1000)\n      if (tokenExpireDate > now) {\n        this.commit('loginSuccess', jwtToken)\n        this.dispatch('getAuthenticatedInstitution')\n        this.dispatch('getAuthenticatedUser')\n      } else {\n        // this.commit('tokenExpired')\n        window.localStorage.clear()\n      }\n    }\n  }\n\n  async getAuthenticatedInstitution() {\n    const institution = await Api.api.getInstitutionUsingGet()\n    this.commit('setAuthenticatedInstitution', institution)\n  }\n\n  async getAuthenticatedUser() {\n    const user = await Api.api.currentUserUsingGet()\n    this.commit('setUser', user)\n  }\n\n  async registerUserForInstitution(payload: { user: RegisterUserRequest; instance: Vue }) {\n    try {\n      const res = await Api.api.registerUserUsingPost(payload.user)\n      this.dispatch('getAuthenticatedInstitution')\n    } catch (err) {\n      payload.instance.$notification.error({\n        message: 'Error',\n        description: 'Nutzer konnte nicht hinzugefügt werden',\n      })\n    }\n  }\n}\n\nexport const authModule = new Module({\n  state: AuthState,\n  getters: AuthGetters,\n  mutations: AuthMutations,\n  actions: AuthActions,\n})\n\nexport const authMapper = createMapper(authModule)\n"],"sourceRoot":""}]}