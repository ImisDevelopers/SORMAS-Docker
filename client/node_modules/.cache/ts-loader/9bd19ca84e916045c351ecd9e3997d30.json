{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/permissions.ts","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/permissions.ts","mtime":1589906836721},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js","mtime":1584795992192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJvbS1lbnRyaWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX3R5cGVvZiBmcm9tICIvaG9tZS9jaXJvdHpraS9wcm9qZWN0cy92aXJ1cy8xXzAxMV9hX2luZmVrdGlvbnNmYWxsX3VlYmVybWl0dGVsbHVuZy9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2Npcm90emtpL3Byb2plY3RzL3ZpcnVzLzFfMDExX2FfaW5mZWt0aW9uc2ZhbGxfdWViZXJtaXR0ZWxsdW5nL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBBcGkgZnJvbSAnQC9hcGknOwppbXBvcnQgeyBBcGkgYXMgQXBpRGVmcyB9IGZyb20gJ0AvYXBpL1N3YWdnZXJBcGknOyAvLyBSZXRyaWV2ZSB0aGUgcmVxdWVzdCBtZXRob2QgYW5kIHBhdGggZm9yIHRoZSBnaXZlbiBTd2FnZ2VyIEFQSSBmdW5jdGlvbgoKZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QXBpUGFyYW1zKGFwaUZ1bmMpIHsKICB2YXIgX215QXBpRGVmcyRhcGk7CgogIC8qCiAgVGhlIGZvbGxvd2luZyBwaWVjZSBvZiBjb2RlIGlzIGEga2luZCBvZiB1Z2x5IGhhY2sgdG8gZmluZCBvdXQgdGhlCiAgcmVxdWVzdCBtZXRob2QgYW5kIHBhdGggdXNlZCBpbiB0aGUgZ2l2ZW4gU3dhZ2dlciBBUEkuIEl0IG9wZXJhdGVzCiAgYnkgZXhlY3V0aW5nIHRoZSBleGFjdCBzYW1lIGZ1bmN0aW9uIG9uIGFuIG93biBBUEkgY29weSB3aXRoIGEKICBzdXJyb2dhdGUgYHJlcXVlc3RgIGZ1bmN0aW9uIHRoYXQgZmV0Y2hlcyBwYXRoIGFuZCBtZXRob2QgcGFyYW1ldGVycwogIHRvIGJlIHJldHVybmVkIGFzIHRoaXMgZnVuY3Rpb24ncyByZXN1bHQuCiAgKi8KICAvLyBTdGVwIDE6IENyZWF0ZSBBUEkgY29weSB3aXRoIHN1cnJvZ2F0ZSBgcmVxdWVzdGAgb3BlcmF0aW9uCiAgdmFyIHJlc3VsdFBhcmFtcyA9IHVuZGVmaW5lZDsKICB2YXIgbXlBcGlEZWZzID0gbmV3IEFwaURlZnMoKTsKCiAgbXlBcGlEZWZzLnJlcXVlc3QgPSBmdW5jdGlvbiAocGF0aCwgbWV0aG9kKSB7CiAgICByZXN1bHRQYXJhbXMgPSB7CiAgICAgIHBhdGg6IHBhdGgsCiAgICAgIG1ldGhvZDogbWV0aG9kCiAgICB9OwogIH07IC8vIFN0ZXAgMjogR2VuZXJhdGUgd2lsZGNhcmQtcGFyYW1ldGVycyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgZnVuY3Rpb24gY2FsbAoKCiAgdmFyIG1vY2tBcmdzID0gW107CgogIGZvciAodmFyIGkgPSAwOyBpIDwgYXBpRnVuYy5sZW5ndGggLSAxOyBpKyspIHsKICAgIG1vY2tBcmdzLnB1c2goJyonKTsKICB9IC8vIFN0ZXAgMzogRG8gdGhlIGZ1bmN0aW9uIGNhbGwgb24gdGhlIG93biBBUEkgY29weQoKCiAgKF9teUFwaURlZnMkYXBpID0gbXlBcGlEZWZzLmFwaSlbYXBpRnVuYy5uYW1lXS5hcHBseShfbXlBcGlEZWZzJGFwaSwgbW9ja0FyZ3MpOwoKICBpZiAoIXJlc3VsdFBhcmFtcykgewogICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZXh0cmFjdCByZXF1ZXN0IHBhcmFtZXRlcnMgZnJvbSBmdW5jdGlvbicpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gcmVzdWx0UGFyYW1zOwogIH0KfSAvLyBleHBvcnQgZnVuY3Rpb24gY2hlY2tBbGxvd2VkKGZ1bmNzOiBSZWNvcmQ8c3RyaW5nLCBBcGlGdW5jdGlvbj4pOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPjsKCmV4cG9ydCBmdW5jdGlvbiBjaGVja0FsbG93ZWQoX3gpIHsKICByZXR1cm4gX2NoZWNrQWxsb3dlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfY2hlY2tBbGxvd2VkKCkgewogIF9jaGVja0FsbG93ZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZnVuY3MpIHsKICAgIHZhciByZXN1bHRMYWJlbHMsIHNpbmdsZVJlc3VsdCwgZnVuY3NBcnIsIGFwaVJlc3VsdCwgcmVzdWx0LCBpLCBmb3JSZXR1cm4sIF9pOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmVzdWx0TGFiZWxzID0gW107CiAgICAgICAgICAgIHNpbmdsZVJlc3VsdCA9IGZhbHNlOwoKICAgICAgICAgICAgaWYgKCFmdW5jcykgewogICAgICAgICAgICAgIGZ1bmNzID0gT2JqZWN0LnZhbHVlcyhBcGkuYXBpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKF90eXBlb2YoZnVuY3MpID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgIGZ1bmNzQXJyID0gW107CiAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoZnVuY3MpLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7CiAgICAgICAgICAgICAgICByZXN1bHRMYWJlbHMucHVzaChlbnRyeVswXSk7CiAgICAgICAgICAgICAgICBmdW5jc0Fyci5wdXNoKGVudHJ5WzFdKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBmdW5jcyA9IGZ1bmNzQXJyOwogICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmNzICYmICFBcnJheS5pc0FycmF5KGZ1bmNzKSkgewogICAgICAgICAgICAgIGZ1bmNzID0gW2Z1bmNzXTsKICAgICAgICAgICAgICBzaW5nbGVSZXN1bHQgPSB0cnVlOwogICAgICAgICAgICB9IC8vIGNvbnN0IHBhcmFtcyA9IGZ1bmNzLm1hcChxdWVyeUFwaVBhcmFtcykKICAgICAgICAgICAgLy8gTWFrZSB0aGUgcGVybWlzc2lvbiBhc2tpbmcgcmVxdWVzdAoKCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gQXBpLnF1ZXJ5UGVybWlzc2lvbnNVc2luZ1Bvc3QoT2JqZWN0LmZyb21FbnRyaWVzKGZ1bmNzLm1hcChmdW5jdGlvbiAoZnVuYykgewogICAgICAgICAgICAgIHJldHVybiBbZnVuYy5uYW1lLCBxdWVyeUFwaVBhcmFtcyhmdW5jKV07CiAgICAgICAgICAgIH0pKSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBhcGlSZXN1bHQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXN1bHQgPSBbXTsKCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmdW5jcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGFwaVJlc3VsdFtmdW5jc1tpXS5uYW1lXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFzaW5nbGVSZXN1bHQpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3VsdFswXSk7CgogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgaWYgKCFyZXN1bHRMYWJlbHMpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvclJldHVybiA9IHt9OwoKICAgICAgICAgICAgZm9yIChfaSA9IDA7IF9pIDwgcmVzdWx0TGFiZWxzLmxlbmd0aDsgX2krKykgewogICAgICAgICAgICAgIGZvclJldHVybltyZXN1bHRMYWJlbHNbX2ldXSA9IHJlc3VsdFtfaV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGZvclJldHVybik7CgogICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX2NoZWNrQWxsb3dlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/util/permissions.ts"],"names":[],"mappings":"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","sourcesContent":["import Api from '@/api'\nimport { Api as ApiDefs } from '@/api/SwaggerApi'\n\nexport interface ApiParams {\n  path: string\n  method: string\n}\nexport type ApiFunction = (...args: any[]) => any\n\n// Retrieve the request method and path for the given Swagger API function\nexport function queryApiParams(apiFunc: ApiFunction): ApiParams {\n  /*\n  The following piece of code is a kind of ugly hack to find out the\n  request method and path used in the given Swagger API. It operates\n  by executing the exact same function on an own API copy with a\n  surrogate `request` function that fetches path and method parameters\n  to be returned as this function's result.\n  */\n\n  // Step 1: Create API copy with surrogate `request` operation\n  let resultParams = undefined as undefined | ApiParams\n  const myApiDefs = new ApiDefs() as any\n  myApiDefs.request = (path: string, method: string) => {\n    resultParams = {\n      path,\n      method,\n    }\n  }\n\n  // Step 2: Generate wildcard-parameters to be included in the function call\n  const mockArgs = [] as string[]\n  for (let i = 0; i < apiFunc.length - 1; i++) {\n    mockArgs.push('*')\n  }\n\n  // Step 3: Do the function call on the own API copy\n  myApiDefs.api[apiFunc.name](...mockArgs)\n\n  if (!resultParams) {\n    throw new Error('Could not extract request parameters from function')\n  } else {\n    return resultParams\n  }\n}\n\nexport async function checkAllowed(funcs: ApiFunction): Promise<boolean>\nexport async function checkAllowed(\n  funcs: ApiFunction[] | undefined\n): Promise<boolean[]>\nexport async function checkAllowed<\n  T extends Record<string, ApiFunction>,\n  R extends { [key in keyof T]: boolean }\n>(funcs: T): Promise<R>\n// export function checkAllowed(funcs: Record<string, ApiFunction>): Record<string, boolean>;\nexport async function checkAllowed(funcs: any): Promise<any> {\n  const resultLabels = [] as string[]\n  let singleResult = false\n  if (!funcs) {\n    funcs = Object.values((Api as any).api)\n  }\n  if (typeof funcs === 'object') {\n    const funcsArr = [] as ApiFunction[]\n    Object.entries(funcs).forEach((entry: [string, any]) => {\n      resultLabels.push(entry[0])\n      funcsArr.push(entry[1])\n    })\n\n    funcs = funcsArr\n  } else if (funcs && !Array.isArray(funcs)) {\n    funcs = [funcs]\n    singleResult = true\n  }\n\n  // const params = funcs.map(queryApiParams)\n\n  // Make the permission asking request\n  const apiResult = (await Api.queryPermissionsUsingPost(\n    Object.fromEntries(\n      funcs.map((func: ApiFunction) => [func.name, queryApiParams(func)])\n    )\n  )) as Record<string, boolean>\n\n  const result = [] as boolean[]\n  for (let i = 0; i < funcs.length; i++) {\n    result[i] = apiResult[funcs[i].name]\n  }\n\n  if (singleResult) {\n    return result[0]\n  } else {\n    if (resultLabels) {\n      const forReturn = {} as Record<string, boolean>\n      for (let i = 0; i < resultLabels.length; i++) {\n        forReturn[resultLabels[i]] = result[i]\n      }\n      return forReturn\n    } else {\n      return result\n    }\n  }\n}\n"],"sourceRoot":""}]}