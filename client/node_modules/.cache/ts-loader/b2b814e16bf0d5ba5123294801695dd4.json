{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/PatientDetails.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/PatientDetails.vue","mtime":1589906836724},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/PatientDetails.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue'\nimport moment, { Moment } from 'moment'\nimport Api from '@/api'\nimport * as permissions from '@/util/permissions'\nimport {\n  LabTest,\n  Patient,\n  Timestamp,\n  ExposureContactFromServer,\n} from '@/api/SwaggerApi'\nimport { patientMapper } from '@/store/modules/patients.module'\nimport {\n  EventTypeItem,\n  eventTypes,\n  testResults,\n  TestResultType,\n} from '@/models/event-types'\nimport { SYMPTOMS } from '@/models/symptoms'\nimport { PRE_ILLNESSES } from '@/models/pre-illnesses'\nimport { Column } from 'ant-design-vue/types/table/column'\nimport { TestTypeItem, testTypes } from '@/models/test-types'\nimport ChangePatientStammdatenForm from '@/components/ChangePatientStammdatenForm.vue'\nimport EditExposureContact from '@/components/EditExposureContact.vue'\nimport { map } from '@/util/mapping'\n\nconst columnsTests: Partial<Column>[] = [\n  {\n    title: 'Test ID',\n    dataIndex: 'testId',\n    key: 'testId',\n  },\n  {\n    title: 'Test Typ',\n    dataIndex: 'testType',\n    key: 'testType',\n    scopedSlots: {\n      customRender: 'testType',\n    },\n  },\n  {\n    title: 'Test Status',\n    dataIndex: 'testStatus',\n    key: 'testStatus',\n    scopedSlots: {\n      customRender: 'testStatus',\n    },\n  },\n  {\n    title: 'Aktualisiert',\n    dataIndex: 'lastUpdate',\n    key: 'lastUpdate',\n    scopedSlots: {\n      customRender: 'lastUpdate',\n    },\n  },\n  {\n    title: 'Kommentar',\n    dataIndex: 'comment',\n    key: 'comment',\n  },\n]\n\nconst columnsExposureContacts: Partial<Column>[] = [\n  {\n    key: 'gotoPatient',\n    width: '40pt',\n    align: 'center',\n    scopedSlots: {\n      customRender: 'gotoPatient',\n    },\n  },\n  {\n    title: 'Nachname',\n    key: 'lastName',\n    dataIndex: 'contact.lastName',\n  },\n  {\n    title: 'Vorname',\n    key: 'firstName',\n    dataIndex: 'contact.firstName',\n  },\n  {\n    title: 'Datum des Kontakts',\n    key: 'dateOfContact',\n    scopedSlots: {\n      customRender: 'dateOfContact',\n    },\n  },\n  {\n    title: 'Kontaktart',\n    key: 'context',\n    dataIndex: 'context',\n  },\n  {\n    title: 'Infektionsstatus',\n    key: 'infected',\n    scopedSlots: {\n      customRender: 'infectionState',\n    },\n  },\n  {\n    title: 'Quarantänestatus',\n    key: 'quarantine',\n    scopedSlots: {\n      customRender: 'quarantineState',\n    },\n  },\n  {\n    title: 'Aktionen',\n    key: 'actions',\n    width: '120pt',\n    align: 'center',\n    scopedSlots: {\n      customRender: 'actions',\n    },\n  },\n]\n\nconst columnsIndexPatients = [\n  {\n    title: 'Name',\n    key: 'name',\n    scopedSlots: {\n      customRender: 'name',\n    },\n  },\n  {\n    title: 'Kontaktdatum',\n    key: 'dateOfContact',\n    scopedSlots: {\n      customRender: 'dateOfContact',\n    },\n  },\n  {\n    title: 'Kontaktart',\n    key: 'context',\n    dataIndex: 'context',\n  },\n]\n\ninterface State {\n  permissions: {\n    sendToQuarantine: boolean\n  }\n  patient: undefined | Patient\n  patientInfectionSources: ExposureContactFromServer[]\n  exposureContacts: ExposureContactFromServer[]\n  exposureContactsLoading: boolean\n  exposureContactForm: any\n  exposureContactInEditing: any\n  patientStatus: EventTypeItem | undefined\n  eventTypes: any[]\n  symptoms: string[]\n  preIllnesses: string[]\n  dateOfBirth: string\n  showChangePatientStammdatenForm: boolean\n  gender: string\n  tests: LabTest[]\n  columnsTests: Partial<Column>[]\n  columnsExposureContacts: Partial<Column>[]\n  columnsIndexPatients: Partial<Column>[]\n  testResults: TestResultType[]\n  testTypes: TestTypeItem[]\n  dateOfReporting: string\n  dateOfIllness: string\n  dateFormat: string\n}\n\nexport default Vue.extend({\n  name: 'PatientDetails',\n  components: {\n    ChangePatientStammdatenForm,\n    EditExposureContact,\n  },\n  computed: {\n    ...patientMapper.mapGetters({\n      patientById: 'patientById',\n    }),\n  },\n\n  async created() {\n    this.loadData()\n    this.exposureContactForm = this.$form.createForm(\n      this.$refs.exposureContactModal as Vue,\n      {\n        name: 'exposure-contact',\n      }\n    )\n  },\n\n  data(): State {\n    return {\n      permissions: {\n        sendToQuarantine: false,\n      },\n      dateFormat: 'DD.MM.YYYY',\n      patient: undefined,\n      patientInfectionSources: [],\n      exposureContacts: [],\n      exposureContactsLoading: false,\n      exposureContactForm: undefined,\n      exposureContactInEditing: null,\n      patientStatus: undefined,\n      eventTypes: eventTypes,\n      testResults: testResults,\n      testTypes: testTypes,\n      symptoms: [],\n      showChangePatientStammdatenForm: false,\n      preIllnesses: [],\n      dateOfBirth: '',\n      gender: '',\n      tests: [],\n      columnsTests,\n      columnsExposureContacts,\n      columnsIndexPatients,\n      dateOfReporting: '',\n      dateOfIllness: '',\n    }\n  },\n\n  watch: {\n    '$route.params.id'() {\n      this.loadData()\n    },\n  },\n\n  methods: {\n    ...patientMapper.mapMutations({\n      setPatient: 'setPatient',\n    }),\n    async loadData() {\n      this.exposureContactsLoading = true\n      try {\n        this.permissions = await permissions.checkAllowed({\n          sendToQuarantine: Api.sendToQuarantineUsingPost,\n        })\n      } catch (err) {\n        console.log(err)\n      }\n\n      // Load Patient\n      const patientId = this.$route.params.id\n      this.patient = this.patientById(this.$route.params.id)\n      if (!this.patient) {\n        const patient = await Api.getPatientForIdUsingGet(patientId)\n        this.setPatient(patient)\n        this.patient = patient\n      }\n\n      if (this.patient.events) {\n        const event = this.patient.events.find(\n          (event) =>\n            event.eventType === 'REGISTERED' || event.eventType === 'SUSPECTED'\n        )\n        if (event) {\n          this.dateOfReporting = moment(event.eventTimestamp).format(\n            this.dateFormat\n          )\n        }\n      }\n\n      if (this.patient.dateOfIllness) {\n        this.dateOfIllness = moment(this.patient.dateOfIllness).format(\n          this.dateFormat\n        )\n      } else {\n        this.dateOfIllness = this.dateOfReporting\n      }\n\n      // Map patient attributes to their display representation\n      this.patientStatus = eventTypes.find(\n        (type) => type.id === this.patient?.patientStatus\n      )\n      this.symptoms =\n        this.patient.symptoms?.map((symptom) => {\n          const patientSymptom = SYMPTOMS.find(\n            (symptomFind) => symptomFind.value === symptom\n          )\n          return patientSymptom ? patientSymptom.label : symptom\n        }) || []\n      this.preIllnesses =\n        this.patient.preIllnesses?.map((preIllness) => {\n          const patientIllness = PRE_ILLNESSES.find(\n            (illness) => illness.value === preIllness\n          )\n          return patientIllness ? patientIllness.label : preIllness\n        }) || []\n      this.dateOfBirth = moment(this.patient.dateOfBirth).format(\n        this.dateFormat\n      )\n      const patientGender = this.patient.gender || ''\n      this.gender =\n        patientGender === 'male'\n          ? 'männlich'\n          : patientGender === 'female'\n          ? 'weiblich'\n          : 'divers'\n\n      // Source of Infection\n      try {\n        this.patientInfectionSources = await Api.getExposureSourceContactsForPatientUsingGet(\n          patientId\n        )\n      } catch (e) {\n        this.patientInfectionSources = []\n      }\n\n      // Tests\n      this.tests = await Api.getLabTestForPatientUsingGet(patientId)\n\n      // Retrieve exposure contacts data\n      this.exposureContacts = await Api.getExposureContactsForPatientUsingGet(\n        patientId\n      )\n      this.exposureContactsLoading = false\n    },\n    timelineColor(eventType: any) {\n      switch (eventType) {\n        case 'TEST_FINISHED_POSITIVE':\n          return 'red'\n        case 'TEST_FINISHED_NEGATIVE':\n          return 'green'\n        default:\n          return 'grey'\n      }\n    },\n    formatTimestamp(timestamp: Timestamp): string {\n      const momentTimestamp = moment(timestamp)\n      if (momentTimestamp.isValid()) {\n        return moment(timestamp).format('DD.MM.YYYY HH:mm')\n      } else {\n        return 'Unbekannt'\n      }\n    },\n    editPatientStammdaten(): void {\n      this.showChangePatientStammdatenForm = true\n    },\n    handleActionClick(e: { key: string }) {\n      switch (e.key) {\n        case 'SEND_TO_QUARANTINE':\n          this.$router.push({\n            name: 'request-quarantine',\n            params: { patientId: this.patient?.id || '' },\n          })\n          break\n        case 'ARRANGE_TEST':\n          this.scheduleTest()\n          break\n      }\n    },\n    scheduleTest() {\n      if (this.patient) {\n        Api.createOrderTestEventUsingPost({\n          patientId: this.patient.id,\n        })\n          .then(() => {\n            this.$notification.success({\n              message: 'Test angefordert',\n              description: '',\n            })\n            this.loadData()\n          })\n          .catch(() => {\n            this.$notification.error({\n              message: 'Es ist ein Fehler aufgetreten',\n              description: '',\n            })\n          })\n      }\n    },\n    addExposureContact() {\n      this.exposureContactInEditing = {}\n\n      Vue.nextTick(() => {\n        this.exposureContactForm.resetFields()\n        this.exposureContactForm.setFieldsValue({\n          source: this.patient,\n        })\n      })\n    },\n    showExposureContact(contactId: number) {\n      const contact = this.exposureContacts.find(\n        (contact: any) => contact.id === contactId\n      )\n\n      this.exposureContactInEditing = contact\n\n      Vue.nextTick(() => {\n        this.exposureContactForm.setFieldsValue(\n          map(contact as { [x: string]: any }, {\n            // source: patient => patient.id,\n            // contact: patient => patient.id,\n            dateOfContact: moment,\n          })\n        )\n      })\n    },\n    persistExposureContact(): Promise<boolean> {\n      const stringFromMoment = (value: Moment): string =>\n        value.format('YYYY-MM-DD')\n\n      return new Promise((resolve: (success: boolean) => void) => {\n        this.exposureContactForm.validateFields(\n          async (err: Error[], values: { [x: string]: any }) => {\n            if (err) {\n              resolve(false)\n              return\n            }\n\n            // Convert values to transport format\n            values = map(values, {\n              id: parseInt,\n              dateOfContact: stringFromMoment,\n            })\n\n            if (values.id) {\n              Object.assign(\n                this.exposureContactInEditing,\n                await Api.updateExposureContactUsingPut(values)\n              )\n            } else {\n              this.exposureContacts.push(\n                await Api.createExposureContactUsingPost(values)\n              )\n            }\n\n            resolve(true)\n          }\n        )\n      })\n    },\n    async removeExposureContact(contactId: number) {\n      await Api.removeExposureContactUsingDelete(contactId)\n      this.exposureContacts = this.exposureContacts.filter(\n        (contact) => contact.id !== contactId\n      )\n    },\n    showPatient(patientId: string) {\n      this.$router.push({ name: 'patient-detail', params: { id: patientId } })\n    },\n    moment,\n    getDate(date: string) {\n      return moment(date).format(this.dateFormat)\n    },\n  },\n})\n"],"sourceRoot":""}]}