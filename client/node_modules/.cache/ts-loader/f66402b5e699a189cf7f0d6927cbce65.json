{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/store/modules/auth.module.ts","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/store/modules/auth.module.ts","mtime":1589906836721},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js","mtime":1584795992192}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/eslint-loader/index.js??ref--13-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/store/modules/auth.module.ts"],"names":[],"mappings":"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","sourcesContent":["import Api, { removeBearerToken, setBearerToken } from '@/api'\nimport {\n  ChangePasswordDTO,\n  Institution,\n  InstitutionDTO,\n  RegisterUserRequest,\n  User,\n  UserDTO,\n} from '@/api/SwaggerApi'\nimport { config } from '@/config'\nimport { InstitutionRole } from '@/models'\nimport router, { AppRoute, navigationRoutes } from '@/router'\nimport { parseJwt } from '@/util'\nimport {\n  Actions,\n  createMapper,\n  Getters,\n  Module,\n  Mutations,\n} from 'vuex-smart-module'\n\ninterface JwtData {\n  roles: InstitutionRole[]\n  exp: number\n  [key: string]: any\n}\n\nclass AuthState {\n  jwtToken: string | undefined = undefined\n  jwtData: JwtData | undefined = undefined\n  user: User | undefined = undefined\n  institution: Institution | undefined = undefined\n  institutionUsers: UserDTO[] | undefined = undefined\n}\n\nclass AuthGetters extends Getters<AuthState> {\n  isAuthenticated(): boolean {\n    return !!this.state.jwtToken // add is valid check expire date\n  }\n\n  institution(): Institution | undefined {\n    return this.state.institution\n  }\n\n  roles() {\n    return this.state.jwtData?.roles || []\n  }\n\n  routes(): AppRoute[] {\n    return navigationRoutes.filter(\n      (r) =>\n        config.showAllViews ||\n        this.getters\n          .roles()\n          .some((a) => r.meta?.navigationInfo?.authorities.includes(a))\n    )\n  }\n\n  institutionUsers() {\n    return this.state.institutionUsers || []\n  }\n}\n\nclass AuthMutations extends Mutations<AuthState> {\n  loginSuccess(jwtToken: string) {\n    this.state.jwtToken = jwtToken\n    this.state.jwtData = parseJwt(jwtToken)\n    setBearerToken(jwtToken)\n  }\n\n  logoutSuccess() {\n    this.state.jwtToken = undefined\n    this.state.jwtData = undefined\n    removeBearerToken()\n  }\n\n  setAuthenticatedInstitution(institution: Institution) {\n    this.state.institution = institution\n  }\n\n  setInstitutionUsers(users: UserDTO[]) {\n    this.state.institutionUsers = users\n  }\n\n  setUser(user: User) {\n    this.state.user = user\n  }\n}\n\nclass AuthActions extends Actions<\n  AuthState,\n  AuthGetters,\n  AuthMutations,\n  AuthActions\n> {\n  async login(payload: { username: string; password: string }) {\n    // # TODO loading animation, encrypt jwt\n    const token: string | undefined = (\n      await Api.signInUserUsingPost({\n        username: payload.username,\n        password: payload.password,\n      })\n    ).jwtToken\n    if (token) {\n      this.commit('loginSuccess', token)\n      this.dispatch('getAuthenticatedInstitution')\n      this.dispatch('getAuthenticatedUser')\n      window.localStorage.setItem('token', '' + token)\n      router.push({ name: 'app' })\n    }\n  }\n\n  async logout() {\n    // # TODO logout request\n    this.commit('logoutSuccess')\n    window.localStorage.clear()\n    // # TODO empty state\n    router.push({ name: 'login' })\n  }\n\n  async init() {\n    const jwtToken = window.localStorage.token\n    if (jwtToken) {\n      const decoded = parseJwt(jwtToken)\n      const now = new Date()\n      const tokenExpireDate = new Date(decoded.exp * 1000)\n      if (tokenExpireDate > now) {\n        this.commit('loginSuccess', jwtToken)\n        this.dispatch('getAuthenticatedInstitution')\n        this.dispatch('getAuthenticatedUser')\n      } else {\n        // this.commit('tokenExpired')\n        window.localStorage.clear()\n      }\n    }\n  }\n\n  async getAuthenticatedInstitution() {\n    const institution = await Api.getInstitutionUsingGet()\n    this.commit('setAuthenticatedInstitution', institution)\n  }\n\n  async getInstitutionUsers() {\n    const users = await Api.getInstitutionUsersUsingGet()\n    this.commit('setInstitutionUsers', users)\n  }\n\n  async getAuthenticatedUser() {\n    const user = await Api.currentUserUsingGet()\n    this.commit('setUser', user)\n  }\n\n  async updateInstitution(institution: InstitutionDTO) {\n    const updatedInstitution = await Api.updateInstitutionUsingPut(institution)\n    this.commit('setAuthenticatedInstitution', updatedInstitution)\n  }\n\n  async registerUserForInstitution(user: RegisterUserRequest) {\n    const res = await Api.registerUserUsingPost(user)\n    this.dispatch('getInstitutionUsers')\n  }\n\n  async deleteUserForInstitution(userId: number) {\n    const res = await Api.deleteInstitutionUserUsingDelete(userId)\n    this.dispatch('getInstitutionUsers')\n  }\n\n  async updateUserForInstitution(user: UserDTO) {\n    await Api.updateInstitutionUserUsingPut(user)\n    this.dispatch('getInstitutionUsers')\n  }\n\n  changePassword(changePassword: ChangePasswordDTO): Promise<void> {\n    return Api.changePasswordUsingPost(changePassword)\n  }\n}\n\nexport const authModule = new Module({\n  state: AuthState,\n  getters: AuthGetters,\n  mutations: AuthMutations,\n  actions: AuthActions,\n})\n\nexport const authMapper = createMapper(authModule)\n"],"sourceRoot":""}]}