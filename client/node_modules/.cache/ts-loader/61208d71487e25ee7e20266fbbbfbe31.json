{"remainingRequest":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js??ref--14-3!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/SendToQuarantine.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/SendToQuarantine.vue","mtime":1589906836724},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/thread-loader/dist/cjs.js","mtime":1584795984506},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/babel-loader/lib/index.js","mtime":1584795984276},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/ts-loader/index.js","mtime":1586724162024},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js","mtime":1584795984278},{"path":"/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js","mtime":1584795993380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cirotzki/projects/virus/1_011_a_infektionsfall_uebermittellung/client/src/views/SendToQuarantine.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Api from '@/api'\nimport Vue from 'vue'\nimport { QuarantineIncident } from '@/api/SwaggerApi'\nimport { Column } from 'ant-design-vue/types/table/column'\nimport moment from 'moment'\nimport { getPlzs } from '@/util/plz-service'\nimport { downloadCsv } from '@/util/export-service'\nimport DateInput from '../components/DateInput.vue'\n\nconst columnsQuarantines = [\n  {\n    title: 'Quarantäne bis',\n    key: 'until',\n    scopedSlots: {\n      customRender: 'until',\n    },\n  },\n  {\n    title: 'Name',\n    key: 'name',\n    dataIndex: 'patient',\n    scopedSlots: {\n      customRender: 'name',\n    },\n  },\n  {\n    title: 'Eingereicht um',\n    key: 'timestmap',\n    dataIndex: 'versionTimestamp',\n    scopedSlots: {\n      customRender: 'timestamp',\n    },\n  },\n]\n\ninterface QuarantinesForZip {\n  zip: string\n  quarantines: QuarantineIncident[]\n  cityName: string\n}\n\ninterface State {\n  quarantinesByZip: QuarantinesForZip[]\n  columnsQuarantines: Partial<Column>[]\n  confirmVisible: boolean // eslint-disable-next-line\n  form: any; \n  today: moment.Moment\n}\n\nexport default Vue.extend({\n  name: 'SendToQuarantine',\n  components: {\n    DateInput,\n  },\n  async created() {\n    const quarantineIncidents = await Api.getSelectedForQuarantineUsingGet()\n    const quarantinesByZip: QuarantinesForZip[] = []\n    for (const quarantineIncident of quarantineIncidents) {\n      const zip = quarantineIncident?.patient?.zip || 'Unbekannt'\n      let byZip = quarantinesByZip.find((quarantine) => quarantine.zip === zip)\n      if (!byZip) {\n        byZip = {\n          zip: zip,\n          quarantines: [],\n          cityName: '',\n        }\n        quarantinesByZip.push(byZip)\n      }\n      byZip.quarantines.push(quarantineIncident)\n    }\n    this.quarantinesByZip = quarantinesByZip\n    for (const quarantinesForZip of quarantinesByZip) {\n      getPlzs(quarantinesForZip.zip).then((plzs) => {\n        if (plzs && plzs.length > 0) {\n          quarantinesForZip.cityName = plzs[0].fields.note\n        }\n      })\n    }\n  },\n  data(): State {\n    return {\n      quarantinesByZip: [],\n      columnsQuarantines: columnsQuarantines,\n      confirmVisible: false,\n      form: this.$form.createForm(this),\n      today: moment(),\n    }\n  },\n  methods: {\n    moment,\n    showPatient(patientId: string) {\n      this.$router.push({ name: 'patient-detail', params: { id: patientId } })\n    },\n    downloadAll() {\n      const header = 'PLZ;Quarantäne bis;Vorname;Nachname;Adresse'\n      let content = ''\n      for (const quarantineIncidents of this.quarantinesByZip) {\n        content +=\n          quarantineIncidents.quarantines\n            .map((quarantine) => {\n              const patient = quarantine.patient\n              if (patient) {\n                const address = `${patient.street} ${patient.houseNumber} ${patient.zip} ${patient.city}`\n                return `${quarantineIncidents.zip};${moment(\n                  quarantine.until\n                ).format('DD.MM.YYYY')};${patient?.firstName};${\n                  patient?.lastName\n                };${address}`\n              } else {\n                console.warn('Quarantine without patient')\n                return ''\n              }\n            })\n            .join('\\n') + '\\n'\n      }\n      const filename =\n        moment().format('YYYY_MM_DD') + '_quarantaene_anordnung.csv'\n      downloadCsv(header + '\\n' + content, filename)\n    },\n    updatePatients() {\n      this.confirmVisible = false\n      const patientIds: string[] = []\n      for (const quarantinesByZip of this.quarantinesByZip) {\n        patientIds.push(\n          ...quarantinesByZip.quarantines.map(\n            (quarantine) => quarantine.patient?.id || ''\n          )\n        )\n      }\n      const request = {\n        patientIds: patientIds,\n        eventDate: this.form.getFieldValue('eventDate')\n          ? this.form.getFieldValue('eventDate').format('YYYY-MM-DD')\n          : undefined,\n      }\n      Api.sendToQuarantineUsingPost(request)\n        .then(() => {\n          const h = this.$createElement\n          this.$success({\n            title: 'Quarantänen aktualisiert.',\n            content: h('div', {}, [\n              h(\n                'div',\n                `Die Quarantänen von ${patientIds.length} Patienten wurden aktualisiert.`\n              ),\n            ]),\n          })\n          this.quarantinesByZip = []\n        })\n        .catch((error: Error) => {\n          const notification = {\n            message: 'Fehler beim Aktualisieren der Quarantänen',\n            description: error.message,\n          }\n          this.$notification.error(notification)\n        })\n    },\n    showModal() {\n      this.confirmVisible = true\n    },\n  },\n})\n"],"sourceRoot":""}]}